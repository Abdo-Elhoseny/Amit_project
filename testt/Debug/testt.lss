
testt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e42  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000042  00800060  00000e42  00000ed6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  008000a2  008000a2  00000f18  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000f18  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000f48  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b0  00000000  00000000  00000f84  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001f58  00000000  00000000  00001134  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c3b  00000000  00000000  0000308c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000124c  00000000  00000000  00003cc7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000368  00000000  00000000  00004f14  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005e3  00000000  00000000  0000527c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001248  00000000  00000000  0000585f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000140  00000000  00000000  00006aa7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 46 05 	jmp	0xa8c	; 0xa8c <__vector_2>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 b7 05 	jmp	0xb6e	; 0xb6e <__vector_5>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e4       	ldi	r30, 0x42	; 66
  68:	fe e0       	ldi	r31, 0x0E	; 14
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 3a       	cpi	r26, 0xA2	; 162
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 ea       	ldi	r26, 0xA2	; 162
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ad 3a       	cpi	r26, 0xAD	; 173
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 b7 03 	call	0x76e	; 0x76e <main>
  8a:	0c 94 1f 07 	jmp	0xe3e	; 0xe3e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Buzzer_Init>:
{
	DIO_SetPinVal(Buzzer_Port, Buzzer_Pin, PIN_ON);
}
void Buzzer_OFF(void)
{
	DIO_SetPinVal(Buzzer_Port, Buzzer_Pin, PIN_OFF);
  92:	4f ef       	ldi	r20, 0xFF	; 255
  94:	63 e0       	ldi	r22, 0x03	; 3
  96:	80 e0       	ldi	r24, 0x00	; 0
  98:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <DIO_SetPinDir>
  9c:	40 e0       	ldi	r20, 0x00	; 0
  9e:	63 e0       	ldi	r22, 0x03	; 3
  a0:	80 e0       	ldi	r24, 0x00	; 0
  a2:	0e 94 00 02 	call	0x400	; 0x400 <DIO_SetPinVal>
  a6:	08 95       	ret

000000a8 <Buzzer_Toggle>:
}

void Buzzer_Toggle(void)
{
	DIO_TogglePin(Buzzer_Port, Buzzer_Pin);
  a8:	63 e0       	ldi	r22, 0x03	; 3
  aa:	80 e0       	ldi	r24, 0x00	; 0
  ac:	0e 94 ad 02 	call	0x55a	; 0x55a <DIO_TogglePin>
  b0:	08 95       	ret

000000b2 <DC_Motors_INIT>:
}
void DC_Forward(void)
{
	//lcd_clear lcd_write moveing forward
	DC_Motor1_START(140, Clock_Wise);
	DC_Motor2_START(140, Clock_Wise);
  b2:	4f ef       	ldi	r20, 0xFF	; 255
  b4:	64 e0       	ldi	r22, 0x04	; 4
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <DIO_SetPinDir>
  bc:	4f ef       	ldi	r20, 0xFF	; 255
  be:	65 e0       	ldi	r22, 0x05	; 5
  c0:	81 e0       	ldi	r24, 0x01	; 1
  c2:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <DIO_SetPinDir>
  c6:	40 e0       	ldi	r20, 0x00	; 0
  c8:	64 e0       	ldi	r22, 0x04	; 4
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	0e 94 00 02 	call	0x400	; 0x400 <DIO_SetPinVal>
  d0:	40 e0       	ldi	r20, 0x00	; 0
  d2:	65 e0       	ldi	r22, 0x05	; 5
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	0e 94 00 02 	call	0x400	; 0x400 <DIO_SetPinVal>
  da:	4f ef       	ldi	r20, 0xFF	; 255
  dc:	66 e0       	ldi	r22, 0x06	; 6
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <DIO_SetPinDir>
  e4:	4f ef       	ldi	r20, 0xFF	; 255
  e6:	67 e0       	ldi	r22, 0x07	; 7
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <DIO_SetPinDir>
  ee:	40 e0       	ldi	r20, 0x00	; 0
  f0:	66 e0       	ldi	r22, 0x06	; 6
  f2:	81 e0       	ldi	r24, 0x01	; 1
  f4:	0e 94 00 02 	call	0x400	; 0x400 <DIO_SetPinVal>
  f8:	40 e0       	ldi	r20, 0x00	; 0
  fa:	67 e0       	ldi	r22, 0x07	; 7
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	0e 94 00 02 	call	0x400	; 0x400 <DIO_SetPinVal>
 102:	4f ef       	ldi	r20, 0xFF	; 255
 104:	63 e0       	ldi	r22, 0x03	; 3
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <DIO_SetPinDir>
 10c:	1c be       	out	0x3c, r1	; 60
 10e:	85 e6       	ldi	r24, 0x65	; 101
 110:	83 bf       	out	0x33, r24	; 51
 112:	19 be       	out	0x39, r1	; 57
 114:	08 95       	ret

00000116 <DC_Motor1_START>:
 116:	8c bf       	out	0x3c, r24	; 60
 118:	66 23       	and	r22, r22
 11a:	19 f0       	breq	.+6      	; 0x122 <DC_Motor1_START+0xc>
 11c:	61 30       	cpi	r22, 0x01	; 1
 11e:	61 f0       	breq	.+24     	; 0x138 <DC_Motor1_START+0x22>
 120:	08 95       	ret
 122:	4f ef       	ldi	r20, 0xFF	; 255
 124:	64 e0       	ldi	r22, 0x04	; 4
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	0e 94 00 02 	call	0x400	; 0x400 <DIO_SetPinVal>
 12c:	40 e0       	ldi	r20, 0x00	; 0
 12e:	65 e0       	ldi	r22, 0x05	; 5
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	0e 94 00 02 	call	0x400	; 0x400 <DIO_SetPinVal>
 136:	08 95       	ret
 138:	40 e0       	ldi	r20, 0x00	; 0
 13a:	64 e0       	ldi	r22, 0x04	; 4
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	0e 94 00 02 	call	0x400	; 0x400 <DIO_SetPinVal>
 142:	4f ef       	ldi	r20, 0xFF	; 255
 144:	65 e0       	ldi	r22, 0x05	; 5
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	0e 94 00 02 	call	0x400	; 0x400 <DIO_SetPinVal>
 14c:	08 95       	ret

0000014e <DC_Motor2_START>:
 14e:	8c bf       	out	0x3c, r24	; 60
 150:	66 23       	and	r22, r22
 152:	19 f0       	breq	.+6      	; 0x15a <DC_Motor2_START+0xc>
 154:	61 30       	cpi	r22, 0x01	; 1
 156:	61 f0       	breq	.+24     	; 0x170 <DC_Motor2_START+0x22>
 158:	08 95       	ret
 15a:	4f ef       	ldi	r20, 0xFF	; 255
 15c:	66 e0       	ldi	r22, 0x06	; 6
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	0e 94 00 02 	call	0x400	; 0x400 <DIO_SetPinVal>
 164:	40 e0       	ldi	r20, 0x00	; 0
 166:	67 e0       	ldi	r22, 0x07	; 7
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	0e 94 00 02 	call	0x400	; 0x400 <DIO_SetPinVal>
 16e:	08 95       	ret
 170:	40 e0       	ldi	r20, 0x00	; 0
 172:	66 e0       	ldi	r22, 0x06	; 6
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	0e 94 00 02 	call	0x400	; 0x400 <DIO_SetPinVal>
 17a:	4f ef       	ldi	r20, 0xFF	; 255
 17c:	67 e0       	ldi	r22, 0x07	; 7
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	0e 94 00 02 	call	0x400	; 0x400 <DIO_SetPinVal>
 184:	08 95       	ret

00000186 <DC_STOP>:


void DC_STOP(void)
{
	//lcd_clear lcd_write car stop
	DIO_SetPinVal(M1_PORT, M1_DIR_PIN1, DIO_PIN_OFF);
 186:	40 e0       	ldi	r20, 0x00	; 0
 188:	64 e0       	ldi	r22, 0x04	; 4
 18a:	81 e0       	ldi	r24, 0x01	; 1
 18c:	0e 94 00 02 	call	0x400	; 0x400 <DIO_SetPinVal>
	DIO_SetPinVal(M1_PORT, M1_DIR_PIN2, DIO_PIN_OFF);
 190:	40 e0       	ldi	r20, 0x00	; 0
 192:	65 e0       	ldi	r22, 0x05	; 5
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	0e 94 00 02 	call	0x400	; 0x400 <DIO_SetPinVal>
	
	DIO_SetPinVal(M2_PORT, M2_DIR_PIN1, DIO_PIN_OFF);
 19a:	40 e0       	ldi	r20, 0x00	; 0
 19c:	66 e0       	ldi	r22, 0x06	; 6
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	0e 94 00 02 	call	0x400	; 0x400 <DIO_SetPinVal>
	DIO_SetPinVal(M2_PORT, M2_DIR_PIN2, DIO_PIN_OFF);
 1a4:	40 e0       	ldi	r20, 0x00	; 0
 1a6:	67 e0       	ldi	r22, 0x07	; 7
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	0e 94 00 02 	call	0x400	; 0x400 <DIO_SetPinVal>
 1ae:	08 95       	ret

000001b0 <DC_Rot_Left>:
}


void DC_Rot_Left(Uint16 angle)
{
 1b0:	cf 93       	push	r28
 1b2:	df 93       	push	r29
 1b4:	ec 01       	movw	r28, r24
	    //lcd_clear lcd_write turning left
		DC_Motor1_START(140, Anti_Clock_Wise);
 1b6:	61 e0       	ldi	r22, 0x01	; 1
 1b8:	8c e8       	ldi	r24, 0x8C	; 140
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	0e 94 8b 00 	call	0x116	; 0x116 <DC_Motor1_START>
		DC_Motor2_START(140, Clock_Wise);
 1c0:	60 e0       	ldi	r22, 0x00	; 0
 1c2:	8c e8       	ldi	r24, 0x8C	; 140
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	0e 94 a7 00 	call	0x14e	; 0x14e <DC_Motor2_START>
		switch (angle)
 1ca:	c2 30       	cpi	r28, 0x02	; 2
 1cc:	d1 05       	cpc	r29, r1
 1ce:	89 f0       	breq	.+34     	; 0x1f2 <DC_Rot_Left+0x42>
 1d0:	c3 30       	cpi	r28, 0x03	; 3
 1d2:	d1 05       	cpc	r29, r1
 1d4:	d1 f0       	breq	.+52     	; 0x20a <DC_Rot_Left+0x5a>
 1d6:	21 97       	sbiw	r28, 0x01	; 1
 1d8:	21 f5       	brne	.+72     	; 0x222 <DC_Rot_Left+0x72>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1da:	2f ef       	ldi	r18, 0xFF	; 255
 1dc:	80 e1       	ldi	r24, 0x10	; 16
 1de:	92 e1       	ldi	r25, 0x12	; 18
 1e0:	21 50       	subi	r18, 0x01	; 1
 1e2:	80 40       	sbci	r24, 0x00	; 0
 1e4:	90 40       	sbci	r25, 0x00	; 0
 1e6:	e1 f7       	brne	.-8      	; 0x1e0 <DC_Rot_Left+0x30>
 1e8:	00 c0       	rjmp	.+0      	; 0x1ea <DC_Rot_Left+0x3a>
 1ea:	00 00       	nop
		{
			case 1: _delay_ms(370); DC_STOP(); break;  
 1ec:	0e 94 c3 00 	call	0x186	; 0x186 <DC_STOP>
 1f0:	1a c0       	rjmp	.+52     	; 0x226 <DC_Rot_Left+0x76>
 1f2:	2f ef       	ldi	r18, 0xFF	; 255
 1f4:	81 e2       	ldi	r24, 0x21	; 33
 1f6:	94 e2       	ldi	r25, 0x24	; 36
 1f8:	21 50       	subi	r18, 0x01	; 1
 1fa:	80 40       	sbci	r24, 0x00	; 0
 1fc:	90 40       	sbci	r25, 0x00	; 0
 1fe:	e1 f7       	brne	.-8      	; 0x1f8 <DC_Rot_Left+0x48>
 200:	00 c0       	rjmp	.+0      	; 0x202 <DC_Rot_Left+0x52>
 202:	00 00       	nop
			
			case 2: _delay_ms(370*2); DC_STOP(); break;
 204:	0e 94 c3 00 	call	0x186	; 0x186 <DC_STOP>
 208:	0e c0       	rjmp	.+28     	; 0x226 <DC_Rot_Left+0x76>
 20a:	2f ef       	ldi	r18, 0xFF	; 255
 20c:	82 e3       	ldi	r24, 0x32	; 50
 20e:	96 e3       	ldi	r25, 0x36	; 54
 210:	21 50       	subi	r18, 0x01	; 1
 212:	80 40       	sbci	r24, 0x00	; 0
 214:	90 40       	sbci	r25, 0x00	; 0
 216:	e1 f7       	brne	.-8      	; 0x210 <DC_Rot_Left+0x60>
 218:	00 c0       	rjmp	.+0      	; 0x21a <DC_Rot_Left+0x6a>
 21a:	00 00       	nop
			
			case 3: _delay_ms(370*3); DC_STOP(); break;
 21c:	0e 94 c3 00 	call	0x186	; 0x186 <DC_STOP>
 220:	02 c0       	rjmp	.+4      	; 0x226 <DC_Rot_Left+0x76>
			
			default: DC_STOP(); break;
 222:	0e 94 c3 00 	call	0x186	; 0x186 <DC_STOP>
		}
	
}
 226:	df 91       	pop	r29
 228:	cf 91       	pop	r28
 22a:	08 95       	ret

0000022c <DC_Rot_Right>:

void DC_Rot_Right(Uint16 angle)
{
 22c:	cf 93       	push	r28
 22e:	df 93       	push	r29
 230:	ec 01       	movw	r28, r24
       //lcd_clear lcd_write turning right	
	   DC_Motor1_START(140, Clock_Wise);
 232:	60 e0       	ldi	r22, 0x00	; 0
 234:	8c e8       	ldi	r24, 0x8C	; 140
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	0e 94 8b 00 	call	0x116	; 0x116 <DC_Motor1_START>
	   DC_Motor2_START(140, Anti_Clock_Wise);
 23c:	61 e0       	ldi	r22, 0x01	; 1
 23e:	8c e8       	ldi	r24, 0x8C	; 140
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	0e 94 a7 00 	call	0x14e	; 0x14e <DC_Motor2_START>
	   switch (angle)
 246:	c2 30       	cpi	r28, 0x02	; 2
 248:	d1 05       	cpc	r29, r1
 24a:	89 f0       	breq	.+34     	; 0x26e <DC_Rot_Right+0x42>
 24c:	c3 30       	cpi	r28, 0x03	; 3
 24e:	d1 05       	cpc	r29, r1
 250:	d1 f0       	breq	.+52     	; 0x286 <DC_Rot_Right+0x5a>
 252:	21 97       	sbiw	r28, 0x01	; 1
 254:	21 f5       	brne	.+72     	; 0x29e <DC_Rot_Right+0x72>
 256:	2f ef       	ldi	r18, 0xFF	; 255
 258:	80 e1       	ldi	r24, 0x10	; 16
 25a:	92 e1       	ldi	r25, 0x12	; 18
 25c:	21 50       	subi	r18, 0x01	; 1
 25e:	80 40       	sbci	r24, 0x00	; 0
 260:	90 40       	sbci	r25, 0x00	; 0
 262:	e1 f7       	brne	.-8      	; 0x25c <DC_Rot_Right+0x30>
 264:	00 c0       	rjmp	.+0      	; 0x266 <DC_Rot_Right+0x3a>
 266:	00 00       	nop
	   {
		case 1: _delay_ms(370); DC_STOP(); break; 
 268:	0e 94 c3 00 	call	0x186	; 0x186 <DC_STOP>
 26c:	1a c0       	rjmp	.+52     	; 0x2a2 <DC_Rot_Right+0x76>
 26e:	2f ef       	ldi	r18, 0xFF	; 255
 270:	81 e2       	ldi	r24, 0x21	; 33
 272:	94 e2       	ldi	r25, 0x24	; 36
 274:	21 50       	subi	r18, 0x01	; 1
 276:	80 40       	sbci	r24, 0x00	; 0
 278:	90 40       	sbci	r25, 0x00	; 0
 27a:	e1 f7       	brne	.-8      	; 0x274 <DC_Rot_Right+0x48>
 27c:	00 c0       	rjmp	.+0      	; 0x27e <DC_Rot_Right+0x52>
 27e:	00 00       	nop
		
		case 2: _delay_ms(370*2); DC_STOP(); break; 
 280:	0e 94 c3 00 	call	0x186	; 0x186 <DC_STOP>
 284:	0e c0       	rjmp	.+28     	; 0x2a2 <DC_Rot_Right+0x76>
 286:	2f ef       	ldi	r18, 0xFF	; 255
 288:	82 e3       	ldi	r24, 0x32	; 50
 28a:	96 e3       	ldi	r25, 0x36	; 54
 28c:	21 50       	subi	r18, 0x01	; 1
 28e:	80 40       	sbci	r24, 0x00	; 0
 290:	90 40       	sbci	r25, 0x00	; 0
 292:	e1 f7       	brne	.-8      	; 0x28c <DC_Rot_Right+0x60>
 294:	00 c0       	rjmp	.+0      	; 0x296 <DC_Rot_Right+0x6a>
 296:	00 00       	nop
		
		case 3: _delay_ms(370*3); DC_STOP(); break; 
 298:	0e 94 c3 00 	call	0x186	; 0x186 <DC_STOP>
 29c:	02 c0       	rjmp	.+4      	; 0x2a2 <DC_Rot_Right+0x76>
		
		default: DC_STOP(); break;  
 29e:	0e 94 c3 00 	call	0x186	; 0x186 <DC_STOP>
	   }

}
 2a2:	df 91       	pop	r29
 2a4:	cf 91       	pop	r28
 2a6:	08 95       	ret

000002a8 <DC_Rot_180>:

void DC_Rot_180(void)
{
	 ///lcd_clear lcd_write turning 180
	 DC_Motor1_START(140, Clock_Wise);
 2a8:	60 e0       	ldi	r22, 0x00	; 0
 2aa:	8c e8       	ldi	r24, 0x8C	; 140
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	0e 94 8b 00 	call	0x116	; 0x116 <DC_Motor1_START>
	 DC_Motor2_START(140, Anti_Clock_Wise);
 2b2:	61 e0       	ldi	r22, 0x01	; 1
 2b4:	8c e8       	ldi	r24, 0x8C	; 140
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	0e 94 a7 00 	call	0x14e	; 0x14e <DC_Motor2_START>
 2bc:	2f ef       	ldi	r18, 0xFF	; 255
 2be:	85 e6       	ldi	r24, 0x65	; 101
 2c0:	9c e6       	ldi	r25, 0x6C	; 108
 2c2:	21 50       	subi	r18, 0x01	; 1
 2c4:	80 40       	sbci	r24, 0x00	; 0
 2c6:	90 40       	sbci	r25, 0x00	; 0
 2c8:	e1 f7       	brne	.-8      	; 0x2c2 <DC_Rot_180+0x1a>
 2ca:	00 c0       	rjmp	.+0      	; 0x2cc <DC_Rot_180+0x24>
 2cc:	00 00       	nop
	  _delay_ms(370*6); 
	  DC_STOP();
 2ce:	0e 94 c3 00 	call	0x186	; 0x186 <DC_STOP>
 2d2:	08 95       	ret

000002d4 <DIO_SetPinDir>:

#include "DIO.h"

void DIO_SetPinDir(Uint8 port, Uint8 pin, Uint8 dir)
{
	switch (dir)
 2d4:	44 23       	and	r20, r20
 2d6:	21 f0       	breq	.+8      	; 0x2e0 <DIO_SetPinDir+0xc>
 2d8:	4f 3f       	cpi	r20, 0xFF	; 255
 2da:	09 f4       	brne	.+2      	; 0x2de <DIO_SetPinDir+0xa>
 2dc:	4b c0       	rjmp	.+150    	; 0x374 <DIO_SetPinDir+0xa0>
 2de:	08 95       	ret
	{
		case DIO_PIN_IN:
		if (pin >=0 && pin <=7)
 2e0:	68 30       	cpi	r22, 0x08	; 8
 2e2:	c0 f5       	brcc	.+112    	; 0x354 <DIO_SetPinDir+0x80>
		{
			switch (port)
 2e4:	81 30       	cpi	r24, 0x01	; 1
 2e6:	91 f0       	breq	.+36     	; 0x30c <DIO_SetPinDir+0x38>
 2e8:	28 f0       	brcs	.+10     	; 0x2f4 <DIO_SetPinDir+0x20>
 2ea:	82 30       	cpi	r24, 0x02	; 2
 2ec:	d9 f0       	breq	.+54     	; 0x324 <DIO_SetPinDir+0x50>
 2ee:	83 30       	cpi	r24, 0x03	; 3
 2f0:	29 f1       	breq	.+74     	; 0x33c <DIO_SetPinDir+0x68>
 2f2:	08 95       	ret
			{
				case DIO_PORTA:
				Clear_Bit(DDRA, pin);
 2f4:	2a b3       	in	r18, 0x1a	; 26
 2f6:	81 e0       	ldi	r24, 0x01	; 1
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	02 c0       	rjmp	.+4      	; 0x300 <DIO_SetPinDir+0x2c>
 2fc:	88 0f       	add	r24, r24
 2fe:	99 1f       	adc	r25, r25
 300:	6a 95       	dec	r22
 302:	e2 f7       	brpl	.-8      	; 0x2fc <DIO_SetPinDir+0x28>
 304:	80 95       	com	r24
 306:	82 23       	and	r24, r18
 308:	8a bb       	out	0x1a, r24	; 26
				break;
 30a:	08 95       	ret
				case DIO_PORTB:
				Clear_Bit(DDRB, pin);
 30c:	27 b3       	in	r18, 0x17	; 23
 30e:	81 e0       	ldi	r24, 0x01	; 1
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	02 c0       	rjmp	.+4      	; 0x318 <DIO_SetPinDir+0x44>
 314:	88 0f       	add	r24, r24
 316:	99 1f       	adc	r25, r25
 318:	6a 95       	dec	r22
 31a:	e2 f7       	brpl	.-8      	; 0x314 <DIO_SetPinDir+0x40>
 31c:	80 95       	com	r24
 31e:	82 23       	and	r24, r18
 320:	87 bb       	out	0x17, r24	; 23
				break;
 322:	08 95       	ret
				case DIO_PORTC:
				Clear_Bit(DDRC, pin);
 324:	24 b3       	in	r18, 0x14	; 20
 326:	81 e0       	ldi	r24, 0x01	; 1
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	02 c0       	rjmp	.+4      	; 0x330 <DIO_SetPinDir+0x5c>
 32c:	88 0f       	add	r24, r24
 32e:	99 1f       	adc	r25, r25
 330:	6a 95       	dec	r22
 332:	e2 f7       	brpl	.-8      	; 0x32c <DIO_SetPinDir+0x58>
 334:	80 95       	com	r24
 336:	82 23       	and	r24, r18
 338:	84 bb       	out	0x14, r24	; 20
				break;
 33a:	08 95       	ret
				case DIO_PORTD:
				Clear_Bit(DDRD, pin);
 33c:	21 b3       	in	r18, 0x11	; 17
 33e:	81 e0       	ldi	r24, 0x01	; 1
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	02 c0       	rjmp	.+4      	; 0x348 <DIO_SetPinDir+0x74>
 344:	88 0f       	add	r24, r24
 346:	99 1f       	adc	r25, r25
 348:	6a 95       	dec	r22
 34a:	e2 f7       	brpl	.-8      	; 0x344 <DIO_SetPinDir+0x70>
 34c:	80 95       	com	r24
 34e:	82 23       	and	r24, r18
 350:	81 bb       	out	0x11, r24	; 17
				break;
 352:	08 95       	ret
				break;
			}
		}
		else
		{
			switch (port)
 354:	81 30       	cpi	r24, 0x01	; 1
 356:	41 f0       	breq	.+16     	; 0x368 <DIO_SetPinDir+0x94>
 358:	28 f0       	brcs	.+10     	; 0x364 <DIO_SetPinDir+0x90>
 35a:	82 30       	cpi	r24, 0x02	; 2
 35c:	39 f0       	breq	.+14     	; 0x36c <DIO_SetPinDir+0x98>
 35e:	83 30       	cpi	r24, 0x03	; 3
 360:	39 f0       	breq	.+14     	; 0x370 <DIO_SetPinDir+0x9c>
 362:	08 95       	ret
			{
				case DIO_PORTA:
				DDRA = dir;
 364:	4a bb       	out	0x1a, r20	; 26
				break;
 366:	08 95       	ret
				case DIO_PORTB:
				DDRB = dir;
 368:	47 bb       	out	0x17, r20	; 23
				break;
 36a:	08 95       	ret
				case DIO_PORTC:
				DDRC = dir;
 36c:	44 bb       	out	0x14, r20	; 20
				break;
 36e:	08 95       	ret
				case DIO_PORTD:
				DDRD = dir;
 370:	41 bb       	out	0x11, r20	; 17
				break;
 372:	08 95       	ret
				break;
			}
		}
		break;
		case DIO_PIN_OUT:
		if (pin >=0 && pin <=7)
 374:	68 30       	cpi	r22, 0x08	; 8
 376:	a0 f5       	brcc	.+104    	; 0x3e0 <DIO_SetPinDir+0x10c>
		{
			switch (port)
 378:	81 30       	cpi	r24, 0x01	; 1
 37a:	89 f0       	breq	.+34     	; 0x39e <DIO_SetPinDir+0xca>
 37c:	28 f0       	brcs	.+10     	; 0x388 <DIO_SetPinDir+0xb4>
 37e:	82 30       	cpi	r24, 0x02	; 2
 380:	c9 f0       	breq	.+50     	; 0x3b4 <DIO_SetPinDir+0xe0>
 382:	83 30       	cpi	r24, 0x03	; 3
 384:	11 f1       	breq	.+68     	; 0x3ca <DIO_SetPinDir+0xf6>
 386:	08 95       	ret
			{
				case DIO_PORTA:
				Set_Bit(DDRA, pin);
 388:	2a b3       	in	r18, 0x1a	; 26
 38a:	81 e0       	ldi	r24, 0x01	; 1
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	02 c0       	rjmp	.+4      	; 0x394 <DIO_SetPinDir+0xc0>
 390:	88 0f       	add	r24, r24
 392:	99 1f       	adc	r25, r25
 394:	6a 95       	dec	r22
 396:	e2 f7       	brpl	.-8      	; 0x390 <DIO_SetPinDir+0xbc>
 398:	82 2b       	or	r24, r18
 39a:	8a bb       	out	0x1a, r24	; 26
				break;
 39c:	08 95       	ret
				case DIO_PORTB:
				Set_Bit(DDRB, pin);
 39e:	27 b3       	in	r18, 0x17	; 23
 3a0:	81 e0       	ldi	r24, 0x01	; 1
 3a2:	90 e0       	ldi	r25, 0x00	; 0
 3a4:	02 c0       	rjmp	.+4      	; 0x3aa <DIO_SetPinDir+0xd6>
 3a6:	88 0f       	add	r24, r24
 3a8:	99 1f       	adc	r25, r25
 3aa:	6a 95       	dec	r22
 3ac:	e2 f7       	brpl	.-8      	; 0x3a6 <DIO_SetPinDir+0xd2>
 3ae:	82 2b       	or	r24, r18
 3b0:	87 bb       	out	0x17, r24	; 23
				break;
 3b2:	08 95       	ret
				case DIO_PORTC:
				Set_Bit(DDRC, pin);
 3b4:	24 b3       	in	r18, 0x14	; 20
 3b6:	81 e0       	ldi	r24, 0x01	; 1
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	02 c0       	rjmp	.+4      	; 0x3c0 <DIO_SetPinDir+0xec>
 3bc:	88 0f       	add	r24, r24
 3be:	99 1f       	adc	r25, r25
 3c0:	6a 95       	dec	r22
 3c2:	e2 f7       	brpl	.-8      	; 0x3bc <DIO_SetPinDir+0xe8>
 3c4:	82 2b       	or	r24, r18
 3c6:	84 bb       	out	0x14, r24	; 20
				break;
 3c8:	08 95       	ret
				case DIO_PORTD:
				Set_Bit(DDRD, pin);
 3ca:	21 b3       	in	r18, 0x11	; 17
 3cc:	81 e0       	ldi	r24, 0x01	; 1
 3ce:	90 e0       	ldi	r25, 0x00	; 0
 3d0:	02 c0       	rjmp	.+4      	; 0x3d6 <DIO_SetPinDir+0x102>
 3d2:	88 0f       	add	r24, r24
 3d4:	99 1f       	adc	r25, r25
 3d6:	6a 95       	dec	r22
 3d8:	e2 f7       	brpl	.-8      	; 0x3d2 <DIO_SetPinDir+0xfe>
 3da:	82 2b       	or	r24, r18
 3dc:	81 bb       	out	0x11, r24	; 17
				break;
 3de:	08 95       	ret
				break;
			}
		}
		else
		{
			switch (port)
 3e0:	81 30       	cpi	r24, 0x01	; 1
 3e2:	41 f0       	breq	.+16     	; 0x3f4 <DIO_SetPinDir+0x120>
 3e4:	28 f0       	brcs	.+10     	; 0x3f0 <DIO_SetPinDir+0x11c>
 3e6:	82 30       	cpi	r24, 0x02	; 2
 3e8:	39 f0       	breq	.+14     	; 0x3f8 <DIO_SetPinDir+0x124>
 3ea:	83 30       	cpi	r24, 0x03	; 3
 3ec:	39 f0       	breq	.+14     	; 0x3fc <DIO_SetPinDir+0x128>
 3ee:	08 95       	ret
			{
				case DIO_PORTA:
				DDRA = dir;
 3f0:	4a bb       	out	0x1a, r20	; 26
				break;
 3f2:	08 95       	ret
				case DIO_PORTB:
				DDRB = dir;
 3f4:	47 bb       	out	0x17, r20	; 23
				break;
 3f6:	08 95       	ret
				case DIO_PORTC:
				DDRC = dir;
 3f8:	44 bb       	out	0x14, r20	; 20
				break;
 3fa:	08 95       	ret
				case DIO_PORTD:
				DDRD = dir;
 3fc:	41 bb       	out	0x11, r20	; 17
 3fe:	08 95       	ret

00000400 <DIO_SetPinVal>:
		default:   //MISRA C rules
		break;
	}
}
void DIO_SetPinVal(Uint8 port, Uint8 pin, Uint8 val)
{
 400:	1f 93       	push	r17
 402:	cf 93       	push	r28
 404:	df 93       	push	r29
 406:	c8 2f       	mov	r28, r24
 408:	16 2f       	mov	r17, r22
 40a:	d4 2f       	mov	r29, r20
	switch (val)
 40c:	44 23       	and	r20, r20
 40e:	21 f0       	breq	.+8      	; 0x418 <DIO_SetPinVal+0x18>
 410:	4f 3f       	cpi	r20, 0xFF	; 255
 412:	09 f4       	brne	.+2      	; 0x416 <DIO_SetPinVal+0x16>
 414:	52 c0       	rjmp	.+164    	; 0x4ba <DIO_SetPinVal+0xba>
 416:	9d c0       	rjmp	.+314    	; 0x552 <DIO_SetPinVal+0x152>
	{
		case DIO_PIN_OFF:
		if (pin >=0 && pin <=7)
 418:	68 30       	cpi	r22, 0x08	; 8
 41a:	d8 f5       	brcc	.+118    	; 0x492 <DIO_SetPinVal+0x92>
		{
			DIO_SetPinDir(port, pin, DIO_PIN_OUT);
 41c:	4f ef       	ldi	r20, 0xFF	; 255
 41e:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <DIO_SetPinDir>
			switch (port)
 422:	c1 30       	cpi	r28, 0x01	; 1
 424:	91 f0       	breq	.+36     	; 0x44a <DIO_SetPinVal+0x4a>
 426:	28 f0       	brcs	.+10     	; 0x432 <DIO_SetPinVal+0x32>
 428:	c2 30       	cpi	r28, 0x02	; 2
 42a:	d9 f0       	breq	.+54     	; 0x462 <DIO_SetPinVal+0x62>
 42c:	c3 30       	cpi	r28, 0x03	; 3
 42e:	29 f1       	breq	.+74     	; 0x47a <DIO_SetPinVal+0x7a>
 430:	90 c0       	rjmp	.+288    	; 0x552 <DIO_SetPinVal+0x152>
			{
				case DIO_PORTA:
				Clear_Bit(PORTA, pin);
 432:	2b b3       	in	r18, 0x1b	; 27
 434:	81 e0       	ldi	r24, 0x01	; 1
 436:	90 e0       	ldi	r25, 0x00	; 0
 438:	02 c0       	rjmp	.+4      	; 0x43e <DIO_SetPinVal+0x3e>
 43a:	88 0f       	add	r24, r24
 43c:	99 1f       	adc	r25, r25
 43e:	1a 95       	dec	r17
 440:	e2 f7       	brpl	.-8      	; 0x43a <DIO_SetPinVal+0x3a>
 442:	80 95       	com	r24
 444:	82 23       	and	r24, r18
 446:	8b bb       	out	0x1b, r24	; 27
				break;
 448:	84 c0       	rjmp	.+264    	; 0x552 <DIO_SetPinVal+0x152>
				case DIO_PORTB:
				Clear_Bit(PORTB, pin);
 44a:	28 b3       	in	r18, 0x18	; 24
 44c:	81 e0       	ldi	r24, 0x01	; 1
 44e:	90 e0       	ldi	r25, 0x00	; 0
 450:	02 c0       	rjmp	.+4      	; 0x456 <DIO_SetPinVal+0x56>
 452:	88 0f       	add	r24, r24
 454:	99 1f       	adc	r25, r25
 456:	1a 95       	dec	r17
 458:	e2 f7       	brpl	.-8      	; 0x452 <DIO_SetPinVal+0x52>
 45a:	80 95       	com	r24
 45c:	82 23       	and	r24, r18
 45e:	88 bb       	out	0x18, r24	; 24
				break;
 460:	78 c0       	rjmp	.+240    	; 0x552 <DIO_SetPinVal+0x152>
				case DIO_PORTC:
				Clear_Bit(PORTC, pin);
 462:	25 b3       	in	r18, 0x15	; 21
 464:	81 e0       	ldi	r24, 0x01	; 1
 466:	90 e0       	ldi	r25, 0x00	; 0
 468:	02 c0       	rjmp	.+4      	; 0x46e <DIO_SetPinVal+0x6e>
 46a:	88 0f       	add	r24, r24
 46c:	99 1f       	adc	r25, r25
 46e:	1a 95       	dec	r17
 470:	e2 f7       	brpl	.-8      	; 0x46a <DIO_SetPinVal+0x6a>
 472:	80 95       	com	r24
 474:	82 23       	and	r24, r18
 476:	85 bb       	out	0x15, r24	; 21
				break;
 478:	6c c0       	rjmp	.+216    	; 0x552 <DIO_SetPinVal+0x152>
				case DIO_PORTD:
				Clear_Bit(PORTD, pin);
 47a:	22 b3       	in	r18, 0x12	; 18
 47c:	81 e0       	ldi	r24, 0x01	; 1
 47e:	90 e0       	ldi	r25, 0x00	; 0
 480:	02 c0       	rjmp	.+4      	; 0x486 <DIO_SetPinVal+0x86>
 482:	88 0f       	add	r24, r24
 484:	99 1f       	adc	r25, r25
 486:	1a 95       	dec	r17
 488:	e2 f7       	brpl	.-8      	; 0x482 <DIO_SetPinVal+0x82>
 48a:	80 95       	com	r24
 48c:	82 23       	and	r24, r18
 48e:	82 bb       	out	0x12, r24	; 18
				break;
 490:	60 c0       	rjmp	.+192    	; 0x552 <DIO_SetPinVal+0x152>
				break;
			}
		}
		else
		{
			DIO_SetPinDir(port, DIO_ALL_PINs, DIO_PIN_OUT);
 492:	4f ef       	ldi	r20, 0xFF	; 255
 494:	68 e0       	ldi	r22, 0x08	; 8
 496:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <DIO_SetPinDir>
			switch (port)
 49a:	c1 30       	cpi	r28, 0x01	; 1
 49c:	41 f0       	breq	.+16     	; 0x4ae <DIO_SetPinVal+0xae>
 49e:	28 f0       	brcs	.+10     	; 0x4aa <DIO_SetPinVal+0xaa>
 4a0:	c2 30       	cpi	r28, 0x02	; 2
 4a2:	39 f0       	breq	.+14     	; 0x4b2 <DIO_SetPinVal+0xb2>
 4a4:	c3 30       	cpi	r28, 0x03	; 3
 4a6:	39 f0       	breq	.+14     	; 0x4b6 <DIO_SetPinVal+0xb6>
 4a8:	54 c0       	rjmp	.+168    	; 0x552 <DIO_SetPinVal+0x152>
			{
				case DIO_PORTA:
				PORTA = val;
 4aa:	db bb       	out	0x1b, r29	; 27
				break;
 4ac:	52 c0       	rjmp	.+164    	; 0x552 <DIO_SetPinVal+0x152>
				case DIO_PORTB:
				PORTB = val;
 4ae:	d8 bb       	out	0x18, r29	; 24
				break;
 4b0:	50 c0       	rjmp	.+160    	; 0x552 <DIO_SetPinVal+0x152>
				case DIO_PORTC:
				PORTC = val;
 4b2:	d5 bb       	out	0x15, r29	; 21
				break;
 4b4:	4e c0       	rjmp	.+156    	; 0x552 <DIO_SetPinVal+0x152>
				case DIO_PORTD:
				PORTD = val;
 4b6:	d2 bb       	out	0x12, r29	; 18
				break;
 4b8:	4c c0       	rjmp	.+152    	; 0x552 <DIO_SetPinVal+0x152>
				break;
			}
		}
		break;
		case DIO_PIN_ON:
		if (pin >=0 && pin <=7)
 4ba:	68 30       	cpi	r22, 0x08	; 8
 4bc:	b8 f5       	brcc	.+110    	; 0x52c <DIO_SetPinVal+0x12c>
		{
			DIO_SetPinDir(port, pin, DIO_PIN_OUT);
 4be:	4f ef       	ldi	r20, 0xFF	; 255
 4c0:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <DIO_SetPinDir>
			switch (port)
 4c4:	c1 30       	cpi	r28, 0x01	; 1
 4c6:	89 f0       	breq	.+34     	; 0x4ea <DIO_SetPinVal+0xea>
 4c8:	28 f0       	brcs	.+10     	; 0x4d4 <DIO_SetPinVal+0xd4>
 4ca:	c2 30       	cpi	r28, 0x02	; 2
 4cc:	c9 f0       	breq	.+50     	; 0x500 <DIO_SetPinVal+0x100>
 4ce:	c3 30       	cpi	r28, 0x03	; 3
 4d0:	11 f1       	breq	.+68     	; 0x516 <DIO_SetPinVal+0x116>
 4d2:	3f c0       	rjmp	.+126    	; 0x552 <DIO_SetPinVal+0x152>
			{
				case DIO_PORTA:
				Set_Bit(PORTA, pin);
 4d4:	2b b3       	in	r18, 0x1b	; 27
 4d6:	81 e0       	ldi	r24, 0x01	; 1
 4d8:	90 e0       	ldi	r25, 0x00	; 0
 4da:	02 c0       	rjmp	.+4      	; 0x4e0 <DIO_SetPinVal+0xe0>
 4dc:	88 0f       	add	r24, r24
 4de:	99 1f       	adc	r25, r25
 4e0:	1a 95       	dec	r17
 4e2:	e2 f7       	brpl	.-8      	; 0x4dc <DIO_SetPinVal+0xdc>
 4e4:	82 2b       	or	r24, r18
 4e6:	8b bb       	out	0x1b, r24	; 27
				break;
 4e8:	34 c0       	rjmp	.+104    	; 0x552 <DIO_SetPinVal+0x152>
				case DIO_PORTB:
				Set_Bit(PORTB, pin);
 4ea:	28 b3       	in	r18, 0x18	; 24
 4ec:	81 e0       	ldi	r24, 0x01	; 1
 4ee:	90 e0       	ldi	r25, 0x00	; 0
 4f0:	02 c0       	rjmp	.+4      	; 0x4f6 <DIO_SetPinVal+0xf6>
 4f2:	88 0f       	add	r24, r24
 4f4:	99 1f       	adc	r25, r25
 4f6:	1a 95       	dec	r17
 4f8:	e2 f7       	brpl	.-8      	; 0x4f2 <DIO_SetPinVal+0xf2>
 4fa:	82 2b       	or	r24, r18
 4fc:	88 bb       	out	0x18, r24	; 24
				break;
 4fe:	29 c0       	rjmp	.+82     	; 0x552 <DIO_SetPinVal+0x152>
				case DIO_PORTC:
				Set_Bit(PORTC, pin);
 500:	25 b3       	in	r18, 0x15	; 21
 502:	81 e0       	ldi	r24, 0x01	; 1
 504:	90 e0       	ldi	r25, 0x00	; 0
 506:	02 c0       	rjmp	.+4      	; 0x50c <DIO_SetPinVal+0x10c>
 508:	88 0f       	add	r24, r24
 50a:	99 1f       	adc	r25, r25
 50c:	1a 95       	dec	r17
 50e:	e2 f7       	brpl	.-8      	; 0x508 <DIO_SetPinVal+0x108>
 510:	82 2b       	or	r24, r18
 512:	85 bb       	out	0x15, r24	; 21
				break;
 514:	1e c0       	rjmp	.+60     	; 0x552 <DIO_SetPinVal+0x152>
				case DIO_PORTD:
				Set_Bit(PORTD, pin);
 516:	22 b3       	in	r18, 0x12	; 18
 518:	81 e0       	ldi	r24, 0x01	; 1
 51a:	90 e0       	ldi	r25, 0x00	; 0
 51c:	02 c0       	rjmp	.+4      	; 0x522 <DIO_SetPinVal+0x122>
 51e:	88 0f       	add	r24, r24
 520:	99 1f       	adc	r25, r25
 522:	1a 95       	dec	r17
 524:	e2 f7       	brpl	.-8      	; 0x51e <DIO_SetPinVal+0x11e>
 526:	82 2b       	or	r24, r18
 528:	82 bb       	out	0x12, r24	; 18
				break;
 52a:	13 c0       	rjmp	.+38     	; 0x552 <DIO_SetPinVal+0x152>
				break;
			}
		}
		else
		{
			DIO_SetPinDir(port, DIO_ALL_PINs, DIO_PIN_OUT);
 52c:	4f ef       	ldi	r20, 0xFF	; 255
 52e:	68 e0       	ldi	r22, 0x08	; 8
 530:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <DIO_SetPinDir>
			switch (port)
 534:	c1 30       	cpi	r28, 0x01	; 1
 536:	41 f0       	breq	.+16     	; 0x548 <DIO_SetPinVal+0x148>
 538:	28 f0       	brcs	.+10     	; 0x544 <DIO_SetPinVal+0x144>
 53a:	c2 30       	cpi	r28, 0x02	; 2
 53c:	39 f0       	breq	.+14     	; 0x54c <DIO_SetPinVal+0x14c>
 53e:	c3 30       	cpi	r28, 0x03	; 3
 540:	39 f0       	breq	.+14     	; 0x550 <DIO_SetPinVal+0x150>
 542:	07 c0       	rjmp	.+14     	; 0x552 <DIO_SetPinVal+0x152>
			{
				case DIO_PORTA:
				PORTA = val;
 544:	db bb       	out	0x1b, r29	; 27
				break;
 546:	05 c0       	rjmp	.+10     	; 0x552 <DIO_SetPinVal+0x152>
				case DIO_PORTB:
				PORTB = val;
 548:	d8 bb       	out	0x18, r29	; 24
				break;
 54a:	03 c0       	rjmp	.+6      	; 0x552 <DIO_SetPinVal+0x152>
				case DIO_PORTC:
				PORTC = val;
 54c:	d5 bb       	out	0x15, r29	; 21
				break;
 54e:	01 c0       	rjmp	.+2      	; 0x552 <DIO_SetPinVal+0x152>
				case DIO_PORTD:
				PORTD = val;
 550:	d2 bb       	out	0x12, r29	; 18
		}
		break;
		default:   //MISRA C rules
		break;
	}
}
 552:	df 91       	pop	r29
 554:	cf 91       	pop	r28
 556:	1f 91       	pop	r17
 558:	08 95       	ret

0000055a <DIO_TogglePin>:
void DIO_TogglePin(Uint8 port, Uint8 pin)
{
 55a:	cf 93       	push	r28
 55c:	df 93       	push	r29
 55e:	c8 2f       	mov	r28, r24
 560:	d6 2f       	mov	r29, r22
	if (pin >=0 && pin <=7)
 562:	68 30       	cpi	r22, 0x08	; 8
 564:	b8 f5       	brcc	.+110    	; 0x5d4 <DIO_TogglePin+0x7a>
	{
		DIO_SetPinDir(port, pin, DIO_PIN_OUT);
 566:	4f ef       	ldi	r20, 0xFF	; 255
 568:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <DIO_SetPinDir>
		switch (port)
 56c:	c1 30       	cpi	r28, 0x01	; 1
 56e:	89 f0       	breq	.+34     	; 0x592 <DIO_TogglePin+0x38>
 570:	28 f0       	brcs	.+10     	; 0x57c <DIO_TogglePin+0x22>
 572:	c2 30       	cpi	r28, 0x02	; 2
 574:	c9 f0       	breq	.+50     	; 0x5a8 <DIO_TogglePin+0x4e>
 576:	c3 30       	cpi	r28, 0x03	; 3
 578:	11 f1       	breq	.+68     	; 0x5be <DIO_TogglePin+0x64>
 57a:	47 c0       	rjmp	.+142    	; 0x60a <DIO_TogglePin+0xb0>
		{
			case DIO_PORTA:
			Toggle_Bit(PORTA, pin);
 57c:	2b b3       	in	r18, 0x1b	; 27
 57e:	81 e0       	ldi	r24, 0x01	; 1
 580:	90 e0       	ldi	r25, 0x00	; 0
 582:	02 c0       	rjmp	.+4      	; 0x588 <DIO_TogglePin+0x2e>
 584:	88 0f       	add	r24, r24
 586:	99 1f       	adc	r25, r25
 588:	da 95       	dec	r29
 58a:	e2 f7       	brpl	.-8      	; 0x584 <DIO_TogglePin+0x2a>
 58c:	82 27       	eor	r24, r18
 58e:	8b bb       	out	0x1b, r24	; 27
			break;
 590:	3c c0       	rjmp	.+120    	; 0x60a <DIO_TogglePin+0xb0>
			case DIO_PORTB:
			Toggle_Bit(PORTB, pin);
 592:	28 b3       	in	r18, 0x18	; 24
 594:	81 e0       	ldi	r24, 0x01	; 1
 596:	90 e0       	ldi	r25, 0x00	; 0
 598:	02 c0       	rjmp	.+4      	; 0x59e <DIO_TogglePin+0x44>
 59a:	88 0f       	add	r24, r24
 59c:	99 1f       	adc	r25, r25
 59e:	da 95       	dec	r29
 5a0:	e2 f7       	brpl	.-8      	; 0x59a <DIO_TogglePin+0x40>
 5a2:	82 27       	eor	r24, r18
 5a4:	88 bb       	out	0x18, r24	; 24
			break;
 5a6:	31 c0       	rjmp	.+98     	; 0x60a <DIO_TogglePin+0xb0>
			case DIO_PORTC:
			Toggle_Bit(PORTC, pin);
 5a8:	25 b3       	in	r18, 0x15	; 21
 5aa:	81 e0       	ldi	r24, 0x01	; 1
 5ac:	90 e0       	ldi	r25, 0x00	; 0
 5ae:	02 c0       	rjmp	.+4      	; 0x5b4 <DIO_TogglePin+0x5a>
 5b0:	88 0f       	add	r24, r24
 5b2:	99 1f       	adc	r25, r25
 5b4:	da 95       	dec	r29
 5b6:	e2 f7       	brpl	.-8      	; 0x5b0 <DIO_TogglePin+0x56>
 5b8:	82 27       	eor	r24, r18
 5ba:	85 bb       	out	0x15, r24	; 21
			break;
 5bc:	26 c0       	rjmp	.+76     	; 0x60a <DIO_TogglePin+0xb0>
			case DIO_PORTD:
			Toggle_Bit(PORTD, pin);
 5be:	22 b3       	in	r18, 0x12	; 18
 5c0:	81 e0       	ldi	r24, 0x01	; 1
 5c2:	90 e0       	ldi	r25, 0x00	; 0
 5c4:	02 c0       	rjmp	.+4      	; 0x5ca <DIO_TogglePin+0x70>
 5c6:	88 0f       	add	r24, r24
 5c8:	99 1f       	adc	r25, r25
 5ca:	da 95       	dec	r29
 5cc:	e2 f7       	brpl	.-8      	; 0x5c6 <DIO_TogglePin+0x6c>
 5ce:	82 27       	eor	r24, r18
 5d0:	82 bb       	out	0x12, r24	; 18
			break;
 5d2:	1b c0       	rjmp	.+54     	; 0x60a <DIO_TogglePin+0xb0>
			break;
		}
	}
	else
	{
		DIO_SetPinDir(port, DIO_ALL_PINs, DIO_PIN_OUT);
 5d4:	4f ef       	ldi	r20, 0xFF	; 255
 5d6:	68 e0       	ldi	r22, 0x08	; 8
 5d8:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <DIO_SetPinDir>
		switch (port)
 5dc:	c1 30       	cpi	r28, 0x01	; 1
 5de:	51 f0       	breq	.+20     	; 0x5f4 <DIO_TogglePin+0x9a>
 5e0:	28 f0       	brcs	.+10     	; 0x5ec <DIO_TogglePin+0x92>
 5e2:	c2 30       	cpi	r28, 0x02	; 2
 5e4:	59 f0       	breq	.+22     	; 0x5fc <DIO_TogglePin+0xa2>
 5e6:	c3 30       	cpi	r28, 0x03	; 3
 5e8:	69 f0       	breq	.+26     	; 0x604 <DIO_TogglePin+0xaa>
 5ea:	0f c0       	rjmp	.+30     	; 0x60a <DIO_TogglePin+0xb0>
		{
			case DIO_PORTA:
			PORTA ^= 0xff;
 5ec:	8b b3       	in	r24, 0x1b	; 27
 5ee:	80 95       	com	r24
 5f0:	8b bb       	out	0x1b, r24	; 27
			break;
 5f2:	0b c0       	rjmp	.+22     	; 0x60a <DIO_TogglePin+0xb0>
			case DIO_PORTB:
			PORTB ^= 0xff;
 5f4:	88 b3       	in	r24, 0x18	; 24
 5f6:	80 95       	com	r24
 5f8:	88 bb       	out	0x18, r24	; 24
			break;
 5fa:	07 c0       	rjmp	.+14     	; 0x60a <DIO_TogglePin+0xb0>
			case DIO_PORTC:
			PORTC ^= 0xff;
 5fc:	85 b3       	in	r24, 0x15	; 21
 5fe:	80 95       	com	r24
 600:	85 bb       	out	0x15, r24	; 21
			break;
 602:	03 c0       	rjmp	.+6      	; 0x60a <DIO_TogglePin+0xb0>
			case DIO_PORTD:
			PORTD ^= 0xff;
 604:	82 b3       	in	r24, 0x12	; 18
 606:	80 95       	com	r24
 608:	82 bb       	out	0x12, r24	; 18
			break;
			default:   //MISRA C rules
			break;
		}
	}
}
 60a:	df 91       	pop	r29
 60c:	cf 91       	pop	r28
 60e:	08 95       	ret

00000610 <lcd_send_command>:
*				 		the first nibble then the second nibble
*						enabling and disabling the LCD in between
*/
void lcd_send_command (uint8_t command)
{
	DATA_BUS=((command&0b11110000));
 610:	98 2f       	mov	r25, r24
 612:	90 7f       	andi	r25, 0xF0	; 240
 614:	9b bb       	out	0x1b, r25	; 27
	CTL_BUS &=~(1<<LCD_RS);
 616:	98 b3       	in	r25, 0x18	; 24
 618:	9d 7f       	andi	r25, 0xFD	; 253
 61a:	98 bb       	out	0x18, r25	; 24
	CTL_BUS |=(1<<LCD_EN);
 61c:	98 b3       	in	r25, 0x18	; 24
 61e:	91 60       	ori	r25, 0x01	; 1
 620:	98 bb       	out	0x18, r25	; 24
 622:	ef e1       	ldi	r30, 0x1F	; 31
 624:	fe e4       	ldi	r31, 0x4E	; 78
 626:	31 97       	sbiw	r30, 0x01	; 1
 628:	f1 f7       	brne	.-4      	; 0x626 <lcd_send_command+0x16>
 62a:	00 c0       	rjmp	.+0      	; 0x62c <lcd_send_command+0x1c>
 62c:	00 00       	nop
	_delay_ms(5);
	CTL_BUS &=~(1<<LCD_EN);
 62e:	98 b3       	in	r25, 0x18	; 24
 630:	9e 7f       	andi	r25, 0xFE	; 254
 632:	98 bb       	out	0x18, r25	; 24
 634:	ef e1       	ldi	r30, 0x1F	; 31
 636:	fe e4       	ldi	r31, 0x4E	; 78
 638:	31 97       	sbiw	r30, 0x01	; 1
 63a:	f1 f7       	brne	.-4      	; 0x638 <lcd_send_command+0x28>
 63c:	00 c0       	rjmp	.+0      	; 0x63e <lcd_send_command+0x2e>
 63e:	00 00       	nop
	_delay_ms(5);
	DATA_BUS=((command&0b00001111)<<4);
 640:	f0 e1       	ldi	r31, 0x10	; 16
 642:	8f 9f       	mul	r24, r31
 644:	c0 01       	movw	r24, r0
 646:	11 24       	eor	r1, r1
 648:	8b bb       	out	0x1b, r24	; 27
	CTL_BUS |=(1<<LCD_EN);
 64a:	88 b3       	in	r24, 0x18	; 24
 64c:	81 60       	ori	r24, 0x01	; 1
 64e:	88 bb       	out	0x18, r24	; 24
 650:	8f e1       	ldi	r24, 0x1F	; 31
 652:	9e e4       	ldi	r25, 0x4E	; 78
 654:	01 97       	sbiw	r24, 0x01	; 1
 656:	f1 f7       	brne	.-4      	; 0x654 <lcd_send_command+0x44>
 658:	00 c0       	rjmp	.+0      	; 0x65a <lcd_send_command+0x4a>
 65a:	00 00       	nop
	_delay_ms(5);
	CTL_BUS &=~(1<<LCD_EN);
 65c:	88 b3       	in	r24, 0x18	; 24
 65e:	8e 7f       	andi	r24, 0xFE	; 254
 660:	88 bb       	out	0x18, r24	; 24
 662:	ef e1       	ldi	r30, 0x1F	; 31
 664:	fe e4       	ldi	r31, 0x4E	; 78
 666:	31 97       	sbiw	r30, 0x01	; 1
 668:	f1 f7       	brne	.-4      	; 0x666 <lcd_send_command+0x56>
 66a:	00 c0       	rjmp	.+0      	; 0x66c <lcd_send_command+0x5c>
 66c:	00 00       	nop
 66e:	08 95       	ret

00000670 <lcd_init>:
*						default setting (cursor on)
*/
void lcd_init(void)
{

	DATA_DDR = (1<<LCD_D7) | (1<<LCD_D6) | (1<<LCD_D5)| (1<<LCD_D4);
 670:	80 ef       	ldi	r24, 0xF0	; 240
 672:	8a bb       	out	0x1a, r24	; 26
	CTL_DDR |= (1<<LCD_EN)|(1<<LCD_RW)|(1<<LCD_RS);
 674:	87 b3       	in	r24, 0x17	; 23
 676:	87 60       	ori	r24, 0x07	; 7
 678:	87 bb       	out	0x17, r24	; 23

	DATA_BUS = (0<<LCD_D7)|(0<<LCD_D6)|(1<<LCD_D5)|(0<<LCD_D4);
 67a:	80 e2       	ldi	r24, 0x20	; 32
 67c:	8b bb       	out	0x1b, r24	; 27
	CTL_BUS|= (1<<LCD_EN)|(0<<LCD_RW)|(0<<LCD_RS);
 67e:	88 b3       	in	r24, 0x18	; 24
 680:	81 60       	ori	r24, 0x01	; 1
 682:	88 bb       	out	0x18, r24	; 24
 684:	8f e1       	ldi	r24, 0x1F	; 31
 686:	9e e4       	ldi	r25, 0x4E	; 78
 688:	01 97       	sbiw	r24, 0x01	; 1
 68a:	f1 f7       	brne	.-4      	; 0x688 <lcd_init+0x18>
 68c:	00 c0       	rjmp	.+0      	; 0x68e <lcd_init+0x1e>
 68e:	00 00       	nop

	_delay_ms(5);
	CTL_BUS &=~(1<<LCD_EN);
 690:	88 b3       	in	r24, 0x18	; 24
 692:	8e 7f       	andi	r24, 0xFE	; 254
 694:	88 bb       	out	0x18, r24	; 24
 696:	8f e1       	ldi	r24, 0x1F	; 31
 698:	9e e4       	ldi	r25, 0x4E	; 78
 69a:	01 97       	sbiw	r24, 0x01	; 1
 69c:	f1 f7       	brne	.-4      	; 0x69a <lcd_init+0x2a>
 69e:	00 c0       	rjmp	.+0      	; 0x6a0 <lcd_init+0x30>
 6a0:	00 00       	nop
	_delay_ms(5);

	lcd_send_command(LCD_CMD_4BIT_2ROW_5X7);
 6a2:	88 e2       	ldi	r24, 0x28	; 40
 6a4:	0e 94 08 03 	call	0x610	; 0x610 <lcd_send_command>
 6a8:	8f e1       	ldi	r24, 0x1F	; 31
 6aa:	9e e4       	ldi	r25, 0x4E	; 78
 6ac:	01 97       	sbiw	r24, 0x01	; 1
 6ae:	f1 f7       	brne	.-4      	; 0x6ac <lcd_init+0x3c>
 6b0:	00 c0       	rjmp	.+0      	; 0x6b2 <lcd_init+0x42>
 6b2:	00 00       	nop
	_delay_ms(5);
	lcd_send_command(LCD_CMD_DISPLAY_CURSOR_BLINK);
 6b4:	8f e0       	ldi	r24, 0x0F	; 15
 6b6:	0e 94 08 03 	call	0x610	; 0x610 <lcd_send_command>
 6ba:	8f e1       	ldi	r24, 0x1F	; 31
 6bc:	9e e4       	ldi	r25, 0x4E	; 78
 6be:	01 97       	sbiw	r24, 0x01	; 1
 6c0:	f1 f7       	brne	.-4      	; 0x6be <lcd_init+0x4e>
 6c2:	00 c0       	rjmp	.+0      	; 0x6c4 <lcd_init+0x54>
 6c4:	00 00       	nop
	_delay_ms(5);
	lcd_send_command(0x80);
 6c6:	80 e8       	ldi	r24, 0x80	; 128
 6c8:	0e 94 08 03 	call	0x610	; 0x610 <lcd_send_command>
 6cc:	08 95       	ret

000006ce <lcd_write_character>:
*						 enabling and disabling the LCD in between
*/
void lcd_write_character(uint8_t character)
{

	DATA_BUS=((character & 0b11110000));
 6ce:	98 2f       	mov	r25, r24
 6d0:	90 7f       	andi	r25, 0xF0	; 240
 6d2:	9b bb       	out	0x1b, r25	; 27
	CTL_BUS|=(1<<LCD_RS);
 6d4:	98 b3       	in	r25, 0x18	; 24
 6d6:	92 60       	ori	r25, 0x02	; 2
 6d8:	98 bb       	out	0x18, r25	; 24
	CTL_BUS |=(1<<LCD_EN);
 6da:	98 b3       	in	r25, 0x18	; 24
 6dc:	91 60       	ori	r25, 0x01	; 1
 6de:	98 bb       	out	0x18, r25	; 24
 6e0:	ef e1       	ldi	r30, 0x1F	; 31
 6e2:	fe e4       	ldi	r31, 0x4E	; 78
 6e4:	31 97       	sbiw	r30, 0x01	; 1
 6e6:	f1 f7       	brne	.-4      	; 0x6e4 <lcd_write_character+0x16>
 6e8:	00 c0       	rjmp	.+0      	; 0x6ea <lcd_write_character+0x1c>
 6ea:	00 00       	nop
	_delay_ms(5);
	CTL_BUS &=~(1<<LCD_EN);
 6ec:	98 b3       	in	r25, 0x18	; 24
 6ee:	9e 7f       	andi	r25, 0xFE	; 254
 6f0:	98 bb       	out	0x18, r25	; 24
 6f2:	ef e1       	ldi	r30, 0x1F	; 31
 6f4:	fe e4       	ldi	r31, 0x4E	; 78
 6f6:	31 97       	sbiw	r30, 0x01	; 1
 6f8:	f1 f7       	brne	.-4      	; 0x6f6 <lcd_write_character+0x28>
 6fa:	00 c0       	rjmp	.+0      	; 0x6fc <lcd_write_character+0x2e>
 6fc:	00 00       	nop
	_delay_ms(5);
	DATA_BUS=((character & 0b00001111)<<4);
 6fe:	f0 e1       	ldi	r31, 0x10	; 16
 700:	8f 9f       	mul	r24, r31
 702:	c0 01       	movw	r24, r0
 704:	11 24       	eor	r1, r1
 706:	8b bb       	out	0x1b, r24	; 27
	CTL_BUS |=(1<<LCD_EN);
 708:	88 b3       	in	r24, 0x18	; 24
 70a:	81 60       	ori	r24, 0x01	; 1
 70c:	88 bb       	out	0x18, r24	; 24
 70e:	8f e1       	ldi	r24, 0x1F	; 31
 710:	9e e4       	ldi	r25, 0x4E	; 78
 712:	01 97       	sbiw	r24, 0x01	; 1
 714:	f1 f7       	brne	.-4      	; 0x712 <lcd_write_character+0x44>
 716:	00 c0       	rjmp	.+0      	; 0x718 <lcd_write_character+0x4a>
 718:	00 00       	nop
	_delay_ms(5);
	CTL_BUS &=~(1<<LCD_EN);
 71a:	88 b3       	in	r24, 0x18	; 24
 71c:	8e 7f       	andi	r24, 0xFE	; 254
 71e:	88 bb       	out	0x18, r24	; 24
 720:	ef e1       	ldi	r30, 0x1F	; 31
 722:	fe e4       	ldi	r31, 0x4E	; 78
 724:	31 97       	sbiw	r30, 0x01	; 1
 726:	f1 f7       	brne	.-4      	; 0x724 <lcd_write_character+0x56>
 728:	00 c0       	rjmp	.+0      	; 0x72a <lcd_write_character+0x5c>
 72a:	00 00       	nop
 72c:	08 95       	ret

0000072e <lcd_write_word>:
*return		   		: void
*purpose       	: printing a full word to the
*				 		LCD (Maximun 20 characters)
*/
void lcd_write_word(uint8_t word[20])
{
 72e:	0f 93       	push	r16
 730:	1f 93       	push	r17
 732:	cf 93       	push	r28
 734:	df 93       	push	r29
 736:	8c 01       	movw	r16, r24
	int i=0;
 738:	c0 e0       	ldi	r28, 0x00	; 0
 73a:	d0 e0       	ldi	r29, 0x00	; 0
	while(word[i]!='\0')
 73c:	03 c0       	rjmp	.+6      	; 0x744 <lcd_write_word+0x16>
	{
		lcd_write_character(word[i]);
 73e:	0e 94 67 03 	call	0x6ce	; 0x6ce <lcd_write_character>
		i++;
 742:	21 96       	adiw	r28, 0x01	; 1
*				 		LCD (Maximun 20 characters)
*/
void lcd_write_word(uint8_t word[20])
{
	int i=0;
	while(word[i]!='\0')
 744:	f8 01       	movw	r30, r16
 746:	ec 0f       	add	r30, r28
 748:	fd 1f       	adc	r31, r29
 74a:	80 81       	ld	r24, Z
 74c:	81 11       	cpse	r24, r1
 74e:	f7 cf       	rjmp	.-18     	; 0x73e <lcd_write_word+0x10>
	{
		lcd_write_character(word[i]);
		i++;
	}
}
 750:	df 91       	pop	r29
 752:	cf 91       	pop	r28
 754:	1f 91       	pop	r17
 756:	0f 91       	pop	r16
 758:	08 95       	ret

0000075a <lcd_clear>:
*purpose       	: Clearing the lcd screen by sending
*				 	the LCD_CMD_CLEAR_DISPLAY command to LCD
*/
void lcd_clear(void)
{
	lcd_send_command(LCD_CMD_CLEAR_DISPLAY);
 75a:	81 e0       	ldi	r24, 0x01	; 1
 75c:	0e 94 08 03 	call	0x610	; 0x610 <lcd_send_command>
 760:	8f e1       	ldi	r24, 0x1F	; 31
 762:	9e e4       	ldi	r25, 0x4E	; 78
 764:	01 97       	sbiw	r24, 0x01	; 1
 766:	f1 f7       	brne	.-4      	; 0x764 <lcd_clear+0xa>
 768:	00 c0       	rjmp	.+0      	; 0x76a <lcd_clear+0x10>
 76a:	00 00       	nop
 76c:	08 95       	ret

0000076e <main>:

int main(void)
{
	
	
	lcd_init();
 76e:	0e 94 38 03 	call	0x670	; 0x670 <lcd_init>
	DC_Motors_INIT();
 772:	0e 94 59 00 	call	0xb2	; 0xb2 <DC_Motors_INIT>
	Servo_INIT();
 776:	0e 94 0a 05 	call	0xa14	; 0xa14 <Servo_INIT>
	Buzzer_Init();
 77a:	0e 94 49 00 	call	0x92	; 0x92 <Buzzer_Init>
	ultrasonic_init();
 77e:	0e 94 23 05 	call	0xa46	; 0xa46 <ultrasonic_init>
	sei();
 782:	78 94       	sei
	
	while(1)
	{
		lcd_clear();
 784:	0e 94 ad 03 	call	0x75a	; 0x75a <lcd_clear>
		lcd_write_word("Forward");
 788:	86 e6       	ldi	r24, 0x66	; 102
 78a:	90 e0       	ldi	r25, 0x00	; 0
 78c:	0e 94 97 03 	call	0x72e	; 0x72e <lcd_write_word>
 790:	2f ef       	ldi	r18, 0xFF	; 255
 792:	89 e6       	ldi	r24, 0x69	; 105
 794:	98 e1       	ldi	r25, 0x18	; 24
 796:	21 50       	subi	r18, 0x01	; 1
 798:	80 40       	sbci	r24, 0x00	; 0
 79a:	90 40       	sbci	r25, 0x00	; 0
 79c:	e1 f7       	brne	.-8      	; 0x796 <main+0x28>
 79e:	00 c0       	rjmp	.+0      	; 0x7a0 <main+0x32>
 7a0:	00 00       	nop
		//DC_Forward();
		_delay_ms(500);
		
		while (1)
		{
			ultra_triger();
 7a2:	0e 94 35 05 	call	0xa6a	; 0xa6a <ultra_triger>
 7a6:	8f e5       	ldi	r24, 0x5F	; 95
 7a8:	9a ee       	ldi	r25, 0xEA	; 234
 7aa:	01 97       	sbiw	r24, 0x01	; 1
 7ac:	f1 f7       	brne	.-4      	; 0x7aa <main+0x3c>
 7ae:	00 c0       	rjmp	.+0      	; 0x7b0 <main+0x42>
 7b0:	00 00       	nop
			_delay_ms(15);
			if ( ult_val == 1) {break;}
 7b2:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <__data_end>
 7b6:	81 30       	cpi	r24, 0x01	; 1
 7b8:	a1 f7       	brne	.-24     	; 0x7a2 <main+0x34>
		}
		
		lcd_clear();
 7ba:	0e 94 ad 03 	call	0x75a	; 0x75a <lcd_clear>
		lcd_write_word("stop");
 7be:	8e e6       	ldi	r24, 0x6E	; 110
 7c0:	90 e0       	ldi	r25, 0x00	; 0
 7c2:	0e 94 97 03 	call	0x72e	; 0x72e <lcd_write_word>
		DC_STOP();
 7c6:	0e 94 c3 00 	call	0x186	; 0x186 <DC_STOP>
 7ca:	9f ef       	ldi	r25, 0xFF	; 255
 7cc:	29 e6       	ldi	r18, 0x69	; 105
 7ce:	88 e1       	ldi	r24, 0x18	; 24
 7d0:	91 50       	subi	r25, 0x01	; 1
 7d2:	20 40       	sbci	r18, 0x00	; 0
 7d4:	80 40       	sbci	r24, 0x00	; 0
 7d6:	e1 f7       	brne	.-8      	; 0x7d0 <main+0x62>
 7d8:	00 c0       	rjmp	.+0      	; 0x7da <main+0x6c>
 7da:	00 00       	nop
		_delay_ms(500);
		x = 1;
 7dc:	81 e0       	ldi	r24, 0x01	; 1
 7de:	90 e0       	ldi	r25, 0x00	; 0
 7e0:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 7e4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		while (1)
		{
			Servo_Rot_Left(count_r);
 7e8:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <count_r>
 7ec:	0e 94 db 04 	call	0x9b6	; 0x9b6 <Servo_Rot_Left>
 7f0:	9f ef       	ldi	r25, 0xFF	; 255
 7f2:	29 e6       	ldi	r18, 0x69	; 105
 7f4:	88 e1       	ldi	r24, 0x18	; 24
 7f6:	91 50       	subi	r25, 0x01	; 1
 7f8:	20 40       	sbci	r18, 0x00	; 0
 7fa:	80 40       	sbci	r24, 0x00	; 0
 7fc:	e1 f7       	brne	.-8      	; 0x7f6 <main+0x88>
 7fe:	00 c0       	rjmp	.+0      	; 0x800 <__DATA_REGION_LENGTH__>
 800:	00 00       	nop
			_delay_ms(500);
			ultra_triger();
 802:	0e 94 35 05 	call	0xa6a	; 0xa6a <ultra_triger>
 806:	8f e5       	ldi	r24, 0x5F	; 95
 808:	9a ee       	ldi	r25, 0xEA	; 234
 80a:	01 97       	sbiw	r24, 0x01	; 1
 80c:	f1 f7       	brne	.-4      	; 0x80a <__DATA_REGION_LENGTH__+0xa>
 80e:	00 c0       	rjmp	.+0      	; 0x810 <__DATA_REGION_LENGTH__+0x10>
 810:	00 00       	nop
			_delay_ms(15);
			if ((ult_val == 0) && (count_r < 4) )
 812:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <__data_end>
 816:	81 11       	cpse	r24, r1
 818:	28 c0       	rjmp	.+80     	; 0x86a <__stack+0xb>
 81a:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <count_r>
 81e:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <count_r+0x1>
 822:	04 97       	sbiw	r24, 0x04	; 4
 824:	10 f5       	brcc	.+68     	; 0x86a <__stack+0xb>
			{
				lcd_clear();
 826:	0e 94 ad 03 	call	0x75a	; 0x75a <lcd_clear>
				lcd_write_word("turning left");
 82a:	83 e7       	ldi	r24, 0x73	; 115
 82c:	90 e0       	ldi	r25, 0x00	; 0
 82e:	0e 94 97 03 	call	0x72e	; 0x72e <lcd_write_word>
				DC_Rot_Left(count_r);
 832:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <count_r>
 836:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <count_r+0x1>
 83a:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <DC_Rot_Left>
 83e:	9f ef       	ldi	r25, 0xFF	; 255
 840:	29 e6       	ldi	r18, 0x69	; 105
 842:	88 e1       	ldi	r24, 0x18	; 24
 844:	91 50       	subi	r25, 0x01	; 1
 846:	20 40       	sbci	r18, 0x00	; 0
 848:	80 40       	sbci	r24, 0x00	; 0
 84a:	e1 f7       	brne	.-8      	; 0x844 <__DATA_REGION_LENGTH__+0x44>
 84c:	00 c0       	rjmp	.+0      	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
 84e:	00 00       	nop
				_delay_ms(500);
				count_r = 1;
 850:	81 e0       	ldi	r24, 0x01	; 1
 852:	90 e0       	ldi	r25, 0x00	; 0
 854:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <count_r+0x1>
 858:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <count_r>
				count_l = 1;
 85c:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <count_l+0x1>
 860:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <count_l>
				Servo_Zero();
 864:	0e 94 05 05 	call	0xa0a	; 0xa0a <Servo_Zero>
				break;
 868:	8d cf       	rjmp	.-230    	; 0x784 <main+0x16>
			}
			count_r ++;
 86a:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <count_r>
 86e:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <count_r+0x1>
 872:	01 96       	adiw	r24, 0x01	; 1
 874:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <count_r+0x1>
 878:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <count_r>
			if (count_r >= 4)
 87c:	04 97       	sbiw	r24, 0x04	; 4
 87e:	e0 f1       	brcs	.+120    	; 0x8f8 <__stack+0x99>
			{
				Servo_Rot_Right(count_l);
 880:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <count_l>
 884:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <Servo_Rot_Right>
 888:	9f ef       	ldi	r25, 0xFF	; 255
 88a:	21 ee       	ldi	r18, 0xE1	; 225
 88c:	84 e0       	ldi	r24, 0x04	; 4
 88e:	91 50       	subi	r25, 0x01	; 1
 890:	20 40       	sbci	r18, 0x00	; 0
 892:	80 40       	sbci	r24, 0x00	; 0
 894:	e1 f7       	brne	.-8      	; 0x88e <__stack+0x2f>
 896:	00 c0       	rjmp	.+0      	; 0x898 <__stack+0x39>
 898:	00 00       	nop
				_delay_ms(100);
				if (ult_val == 0)
 89a:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <__data_end>
 89e:	81 11       	cpse	r24, r1
 8a0:	22 c0       	rjmp	.+68     	; 0x8e6 <__stack+0x87>
				{
					lcd_clear();
 8a2:	0e 94 ad 03 	call	0x75a	; 0x75a <lcd_clear>
					lcd_write_word("turning right");
 8a6:	80 e8       	ldi	r24, 0x80	; 128
 8a8:	90 e0       	ldi	r25, 0x00	; 0
 8aa:	0e 94 97 03 	call	0x72e	; 0x72e <lcd_write_word>
					DC_Rot_Right(count_l);
 8ae:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <count_l>
 8b2:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <count_l+0x1>
 8b6:	0e 94 16 01 	call	0x22c	; 0x22c <DC_Rot_Right>
 8ba:	9f ef       	ldi	r25, 0xFF	; 255
 8bc:	29 e6       	ldi	r18, 0x69	; 105
 8be:	88 e1       	ldi	r24, 0x18	; 24
 8c0:	91 50       	subi	r25, 0x01	; 1
 8c2:	20 40       	sbci	r18, 0x00	; 0
 8c4:	80 40       	sbci	r24, 0x00	; 0
 8c6:	e1 f7       	brne	.-8      	; 0x8c0 <__stack+0x61>
 8c8:	00 c0       	rjmp	.+0      	; 0x8ca <__stack+0x6b>
 8ca:	00 00       	nop
					_delay_ms(500);
					count_r = 1;
 8cc:	81 e0       	ldi	r24, 0x01	; 1
 8ce:	90 e0       	ldi	r25, 0x00	; 0
 8d0:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <count_r+0x1>
 8d4:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <count_r>
					count_l = 1;
 8d8:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <count_l+0x1>
 8dc:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <count_l>
					Servo_Zero();
 8e0:	0e 94 05 05 	call	0xa0a	; 0xa0a <Servo_Zero>
					break;
 8e4:	4f cf       	rjmp	.-354    	; 0x784 <main+0x16>
				}
				count_l ++;
 8e6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <count_l>
 8ea:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <count_l+0x1>
 8ee:	01 96       	adiw	r24, 0x01	; 1
 8f0:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <count_l+0x1>
 8f4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <count_l>
			}
			
			if ((count_r >=4) && (count_l >=4) && (x == 1))
 8f8:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <count_r>
 8fc:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <count_r+0x1>
 900:	84 30       	cpi	r24, 0x04	; 4
 902:	91 05       	cpc	r25, r1
 904:	a8 f1       	brcs	.+106    	; 0x970 <__stack+0x111>
 906:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <count_l>
 90a:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <count_l+0x1>
 90e:	24 30       	cpi	r18, 0x04	; 4
 910:	31 05       	cpc	r19, r1
 912:	70 f1       	brcs	.+92     	; 0x970 <__stack+0x111>
 914:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 918:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 91c:	21 30       	cpi	r18, 0x01	; 1
 91e:	31 05       	cpc	r19, r1
 920:	39 f5       	brne	.+78     	; 0x970 <__stack+0x111>
 922:	9f ef       	ldi	r25, 0xFF	; 255
 924:	29 e6       	ldi	r18, 0x69	; 105
 926:	88 e1       	ldi	r24, 0x18	; 24
 928:	91 50       	subi	r25, 0x01	; 1
 92a:	20 40       	sbci	r18, 0x00	; 0
 92c:	80 40       	sbci	r24, 0x00	; 0
 92e:	e1 f7       	brne	.-8      	; 0x928 <__stack+0xc9>
 930:	00 c0       	rjmp	.+0      	; 0x932 <__stack+0xd3>
 932:	00 00       	nop
			{
				_delay_ms(500);
				Servo_Zero();
 934:	0e 94 05 05 	call	0xa0a	; 0xa0a <Servo_Zero>
				lcd_clear();
 938:	0e 94 ad 03 	call	0x75a	; 0x75a <lcd_clear>
				lcd_write_word("turning 180 degree");
 93c:	8e e8       	ldi	r24, 0x8E	; 142
 93e:	90 e0       	ldi	r25, 0x00	; 0
 940:	0e 94 97 03 	call	0x72e	; 0x72e <lcd_write_word>
				DC_Rot_180();
 944:	0e 94 54 01 	call	0x2a8	; 0x2a8 <DC_Rot_180>
				count_r = 1;
 948:	81 e0       	ldi	r24, 0x01	; 1
 94a:	90 e0       	ldi	r25, 0x00	; 0
 94c:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <count_r+0x1>
 950:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <count_r>
				count_l = 1;
 954:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <count_l+0x1>
 958:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <count_l>
				x ++;
 95c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 960:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 964:	01 96       	adiw	r24, 0x01	; 1
 966:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 96a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 96e:	3c cf       	rjmp	.-392    	; 0x7e8 <main+0x7a>
				
			}
			else if ((count_r >=4) && (count_l >=4) && (x >= 2))
 970:	04 97       	sbiw	r24, 0x04	; 4
 972:	08 f4       	brcc	.+2      	; 0x976 <__stack+0x117>
 974:	39 cf       	rjmp	.-398    	; 0x7e8 <main+0x7a>
 976:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <count_l>
 97a:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <count_l+0x1>
 97e:	04 97       	sbiw	r24, 0x04	; 4
 980:	08 f4       	brcc	.+2      	; 0x984 <__stack+0x125>
 982:	32 cf       	rjmp	.-412    	; 0x7e8 <main+0x7a>
 984:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 988:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 98c:	02 97       	sbiw	r24, 0x02	; 2
 98e:	08 f4       	brcc	.+2      	; 0x992 <__stack+0x133>
 990:	2b cf       	rjmp	.-426    	; 0x7e8 <main+0x7a>
			{
				while (1)
				{
					lcd_clear();
 992:	0e 94 ad 03 	call	0x75a	; 0x75a <lcd_clear>
					lcd_write_word("stop");
 996:	8e e6       	ldi	r24, 0x6E	; 110
 998:	90 e0       	ldi	r25, 0x00	; 0
 99a:	0e 94 97 03 	call	0x72e	; 0x72e <lcd_write_word>
					Buzzer_Toggle();
 99e:	0e 94 54 00 	call	0xa8	; 0xa8 <Buzzer_Toggle>
 9a2:	9f ef       	ldi	r25, 0xFF	; 255
 9a4:	23 ec       	ldi	r18, 0xC3	; 195
 9a6:	89 e0       	ldi	r24, 0x09	; 9
 9a8:	91 50       	subi	r25, 0x01	; 1
 9aa:	20 40       	sbci	r18, 0x00	; 0
 9ac:	80 40       	sbci	r24, 0x00	; 0
 9ae:	e1 f7       	brne	.-8      	; 0x9a8 <__stack+0x149>
 9b0:	00 c0       	rjmp	.+0      	; 0x9b2 <__stack+0x153>
 9b2:	00 00       	nop
 9b4:	ee cf       	rjmp	.-36     	; 0x992 <__stack+0x133>

000009b6 <Servo_Rot_Left>:

void Servo_Rot_Left(Uint8 angle)
{
	
	
	switch(angle)
 9b6:	82 30       	cpi	r24, 0x02	; 2
 9b8:	49 f0       	breq	.+18     	; 0x9cc <Servo_Rot_Left+0x16>
 9ba:	83 30       	cpi	r24, 0x03	; 3
 9bc:	61 f0       	breq	.+24     	; 0x9d6 <Servo_Rot_Left+0x20>
 9be:	81 30       	cpi	r24, 0x01	; 1
 9c0:	71 f4       	brne	.+28     	; 0x9de <Servo_Rot_Left+0x28>
	{
	case 1: OCR1A=475; break; // angle 60
 9c2:	8b ed       	ldi	r24, 0xDB	; 219
 9c4:	91 e0       	ldi	r25, 0x01	; 1
 9c6:	9b bd       	out	0x2b, r25	; 43
 9c8:	8a bd       	out	0x2a, r24	; 42
 9ca:	08 95       	ret

	case 2: OCR1A=550; break; // angle 30
 9cc:	86 e2       	ldi	r24, 0x26	; 38
 9ce:	92 e0       	ldi	r25, 0x02	; 2
 9d0:	9b bd       	out	0x2b, r25	; 43
 9d2:	8a bd       	out	0x2a, r24	; 42
 9d4:	08 95       	ret

	case 3: OCR1A=900; break; // angle 0
 9d6:	84 e8       	ldi	r24, 0x84	; 132
 9d8:	93 e0       	ldi	r25, 0x03	; 3
 9da:	9b bd       	out	0x2b, r25	; 43
 9dc:	8a bd       	out	0x2a, r24	; 42
 9de:	08 95       	ret

000009e0 <Servo_Rot_Right>:

}

void Servo_Rot_Right(Uint8 angle)
{
	switch(angle)
 9e0:	82 30       	cpi	r24, 0x02	; 2
 9e2:	49 f0       	breq	.+18     	; 0x9f6 <Servo_Rot_Right+0x16>
 9e4:	83 30       	cpi	r24, 0x03	; 3
 9e6:	61 f0       	breq	.+24     	; 0xa00 <Servo_Rot_Right+0x20>
 9e8:	81 30       	cpi	r24, 0x01	; 1
 9ea:	71 f4       	brne	.+28     	; 0xa08 <Servo_Rot_Right+0x28>
	{
//	case 0: OCR1A=375; break; // zero car
		
	case 1: OCR1A=275; break; // angle 120
 9ec:	83 e1       	ldi	r24, 0x13	; 19
 9ee:	91 e0       	ldi	r25, 0x01	; 1
 9f0:	9b bd       	out	0x2b, r25	; 43
 9f2:	8a bd       	out	0x2a, r24	; 42
 9f4:	08 95       	ret

	case 2: OCR1A=200; break; // angle 150
 9f6:	88 ec       	ldi	r24, 0xC8	; 200
 9f8:	90 e0       	ldi	r25, 0x00	; 0
 9fa:	9b bd       	out	0x2b, r25	; 43
 9fc:	8a bd       	out	0x2a, r24	; 42
 9fe:	08 95       	ret

	case 3: OCR1A=50; break; // angle 180
 a00:	82 e3       	ldi	r24, 0x32	; 50
 a02:	90 e0       	ldi	r25, 0x00	; 0
 a04:	9b bd       	out	0x2b, r25	; 43
 a06:	8a bd       	out	0x2a, r24	; 42
 a08:	08 95       	ret

00000a0a <Servo_Zero>:

}

void Servo_Zero(void)
{
	OCR1A=375; // zero car
 a0a:	87 e7       	ldi	r24, 0x77	; 119
 a0c:	91 e0       	ldi	r25, 0x01	; 1
 a0e:	9b bd       	out	0x2b, r25	; 43
 a10:	8a bd       	out	0x2a, r24	; 42
 a12:	08 95       	ret

00000a14 <Servo_INIT>:



void Servo_INIT(void)
{
	Servo_Zero();
 a14:	0e 94 05 05 	call	0xa0a	; 0xa0a <Servo_Zero>
	TCCR1A|=(1<<COM1A1)|(1<<COM1B1)|(1<<WGM11);        //NON Inverted PWM
 a18:	8f b5       	in	r24, 0x2f	; 47
 a1a:	82 6a       	ori	r24, 0xA2	; 162
 a1c:	8f bd       	out	0x2f, r24	; 47
	TCCR1B|=(1<<WGM13)|(1<<WGM12)|(1<<CS11)|(1<<CS10); //PRESCALER=64 MODE 14(FAST PWM) 
 a1e:	8e b5       	in	r24, 0x2e	; 46
 a20:	8b 61       	ori	r24, 0x1B	; 27
 a22:	8e bd       	out	0x2e, r24	; 46
	ICR1=4999;  //fPWM=50Hz (Period = 20ms Standard).
 a24:	87 e8       	ldi	r24, 0x87	; 135
 a26:	93 e1       	ldi	r25, 0x13	; 19
 a28:	97 bd       	out	0x27, r25	; 39
 a2a:	86 bd       	out	0x26, r24	; 38
	//DDRD|=(1<<PD4)|(1<<PD5);
	DIO_SetPinDir(Control_port, Control_pin, DIO_PIN_OUT);
 a2c:	4f ef       	ldi	r20, 0xFF	; 255
 a2e:	65 e0       	ldi	r22, 0x05	; 5
 a30:	83 e0       	ldi	r24, 0x03	; 3
 a32:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <DIO_SetPinDir>
 a36:	08 95       	ret

00000a38 <enable_ex_interrupt>:
	return;
}

void enable_ex_interrupt(void){

	MCUCR |= (1<<ISC10);		// Trigger INT1 on any logic change.
 a38:	85 b7       	in	r24, 0x35	; 53
 a3a:	84 60       	ori	r24, 0x04	; 4
 a3c:	85 bf       	out	0x35, r24	; 53
	GICR  |= (1<<INT1);			// Enable INT1 interrupts.
 a3e:	8b b7       	in	r24, 0x3b	; 59
 a40:	80 68       	ori	r24, 0x80	; 128
 a42:	8b bf       	out	0x3b, r24	; 59
 a44:	08 95       	ret

00000a46 <ultrasonic_init>:
Uint32 distance;
Uint8 ult_val = 0;

void ultrasonic_init(void){

	TRIGER_DDR|=(1<<TRIGER);
 a46:	81 b3       	in	r24, 0x11	; 17
 a48:	81 60       	ori	r24, 0x01	; 1
 a4a:	81 bb       	out	0x11, r24	; 17
	ECHO_DDR&=~(1<<ECHO);
 a4c:	81 b3       	in	r24, 0x11	; 17
 a4e:	87 7f       	andi	r24, 0xF7	; 247
 a50:	81 bb       	out	0x11, r24	; 17
	ECHO_PULLUP|=(1<<ECHO);
 a52:	82 b3       	in	r24, 0x12	; 18
 a54:	88 60       	ori	r24, 0x08	; 8
 a56:	82 bb       	out	0x12, r24	; 18
	enable_ex_interrupt();
 a58:	0e 94 1c 05 	call	0xa38	; 0xa38 <enable_ex_interrupt>
	TCCR2 = 0x02;
 a5c:	82 e0       	ldi	r24, 0x02	; 2
 a5e:	85 bd       	out	0x25, r24	; 37
	/* Initializing the timer with zero */
	TCNT2 = 0x00;
 a60:	14 bc       	out	0x24, r1	; 36
	/* Timer overflow interrupt enable*/
	TIMSK |=(1<<TOIE2);
 a62:	89 b7       	in	r24, 0x39	; 57
 a64:	80 64       	ori	r24, 0x40	; 64
 a66:	89 bf       	out	0x39, r24	; 57
 a68:	08 95       	ret

00000a6a <ultra_triger>:

	return;
}

void ultra_triger(void){
	if(!sensor_working){
 a6a:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <sensor_working>
 a6e:	81 11       	cpse	r24, r1
 a70:	0c c0       	rjmp	.+24     	; 0xa8a <ultra_triger+0x20>
		TRIGER_PORT|=(1<<TRIGER);
 a72:	82 b3       	in	r24, 0x12	; 18
 a74:	81 60       	ori	r24, 0x01	; 1
 a76:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 a78:	80 e5       	ldi	r24, 0x50	; 80
 a7a:	8a 95       	dec	r24
 a7c:	f1 f7       	brne	.-4      	; 0xa7a <ultra_triger+0x10>
		_delay_us(15);
		TRIGER_PORT&=~(1<<TRIGER);
 a7e:	82 b3       	in	r24, 0x12	; 18
 a80:	8e 7f       	andi	r24, 0xFE	; 254
 a82:	82 bb       	out	0x12, r24	; 18
		sensor_working=1;
 a84:	81 e0       	ldi	r24, 0x01	; 1
 a86:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <sensor_working>
 a8a:	08 95       	ret

00000a8c <__vector_2>:
	}
}

ISR(INT1_vect){
 a8c:	1f 92       	push	r1
 a8e:	0f 92       	push	r0
 a90:	0f b6       	in	r0, 0x3f	; 63
 a92:	0f 92       	push	r0
 a94:	11 24       	eor	r1, r1
 a96:	2f 93       	push	r18
 a98:	3f 93       	push	r19
 a9a:	4f 93       	push	r20
 a9c:	5f 93       	push	r21
 a9e:	6f 93       	push	r22
 aa0:	7f 93       	push	r23
 aa2:	8f 93       	push	r24
 aa4:	9f 93       	push	r25
 aa6:	af 93       	push	r26
 aa8:	bf 93       	push	r27
 aaa:	ef 93       	push	r30
 aac:	ff 93       	push	r31
	if(sensor_working==1){
 aae:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <sensor_working>
 ab2:	81 30       	cpi	r24, 0x01	; 1
 ab4:	09 f0       	breq	.+2      	; 0xab8 <__vector_2+0x2c>
 ab6:	4a c0       	rjmp	.+148    	; 0xb4c <__vector_2+0xc0>
		if(rising_edge==0){
 ab8:	80 91 a7 00 	lds	r24, 0x00A7	; 0x8000a7 <rising_edge>
 abc:	81 11       	cpse	r24, r1
 abe:	0d c0       	rjmp	.+26     	; 0xada <__vector_2+0x4e>
			TCNT2=0x00;
 ac0:	14 bc       	out	0x24, r1	; 36
			rising_edge=1;
 ac2:	81 e0       	ldi	r24, 0x01	; 1
 ac4:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <rising_edge>
			timer_counter=0;
 ac8:	10 92 a3 00 	sts	0x00A3, r1	; 0x8000a3 <timer_counter>
 acc:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <timer_counter+0x1>
 ad0:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <timer_counter+0x2>
 ad4:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <timer_counter+0x3>
 ad8:	39 c0       	rjmp	.+114    	; 0xb4c <__vector_2+0xc0>
		}
		else{
			ult_val = 0;
 ada:	10 92 a2 00 	sts	0x00A2, r1	; 0x8000a2 <__data_end>
			distance=(timer_counter*256+TCNT2)/116.6;
 ade:	80 91 a3 00 	lds	r24, 0x00A3	; 0x8000a3 <timer_counter>
 ae2:	90 91 a4 00 	lds	r25, 0x00A4	; 0x8000a4 <timer_counter+0x1>
 ae6:	a0 91 a5 00 	lds	r26, 0x00A5	; 0x8000a5 <timer_counter+0x2>
 aea:	b0 91 a6 00 	lds	r27, 0x00A6	; 0x8000a6 <timer_counter+0x3>
 aee:	ba 2f       	mov	r27, r26
 af0:	a9 2f       	mov	r26, r25
 af2:	98 2f       	mov	r25, r24
 af4:	88 27       	eor	r24, r24
 af6:	24 b5       	in	r18, 0x24	; 36
 af8:	bc 01       	movw	r22, r24
 afa:	cd 01       	movw	r24, r26
 afc:	62 0f       	add	r22, r18
 afe:	71 1d       	adc	r23, r1
 b00:	81 1d       	adc	r24, r1
 b02:	91 1d       	adc	r25, r1
 b04:	0e 94 91 06 	call	0xd22	; 0xd22 <__floatunsisf>
 b08:	23 e3       	ldi	r18, 0x33	; 51
 b0a:	33 e3       	ldi	r19, 0x33	; 51
 b0c:	49 ee       	ldi	r20, 0xE9	; 233
 b0e:	52 e4       	ldi	r21, 0x42	; 66
 b10:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <__divsf3>
 b14:	0e 94 62 06 	call	0xcc4	; 0xcc4 <__fixunssfsi>
 b18:	60 93 a9 00 	sts	0x00A9, r22	; 0x8000a9 <distance>
 b1c:	70 93 aa 00 	sts	0x00AA, r23	; 0x8000aa <distance+0x1>
 b20:	80 93 ab 00 	sts	0x00AB, r24	; 0x8000ab <distance+0x2>
 b24:	90 93 ac 00 	sts	0x00AC, r25	; 0x8000ac <distance+0x3>
			if(distance <= 30)
 b28:	6f 31       	cpi	r22, 0x1F	; 31
 b2a:	71 05       	cpc	r23, r1
 b2c:	81 05       	cpc	r24, r1
 b2e:	91 05       	cpc	r25, r1
 b30:	18 f4       	brcc	.+6      	; 0xb38 <__vector_2+0xac>
			{
				ult_val = 1;
 b32:	81 e0       	ldi	r24, 0x01	; 1
 b34:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__data_end>
			}
			timer_counter=0;
 b38:	10 92 a3 00 	sts	0x00A3, r1	; 0x8000a3 <timer_counter>
 b3c:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <timer_counter+0x1>
 b40:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <timer_counter+0x2>
 b44:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <timer_counter+0x3>
			rising_edge=0;
 b48:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <rising_edge>
		}
	}
}
 b4c:	ff 91       	pop	r31
 b4e:	ef 91       	pop	r30
 b50:	bf 91       	pop	r27
 b52:	af 91       	pop	r26
 b54:	9f 91       	pop	r25
 b56:	8f 91       	pop	r24
 b58:	7f 91       	pop	r23
 b5a:	6f 91       	pop	r22
 b5c:	5f 91       	pop	r21
 b5e:	4f 91       	pop	r20
 b60:	3f 91       	pop	r19
 b62:	2f 91       	pop	r18
 b64:	0f 90       	pop	r0
 b66:	0f be       	out	0x3f, r0	; 63
 b68:	0f 90       	pop	r0
 b6a:	1f 90       	pop	r1
 b6c:	18 95       	reti

00000b6e <__vector_5>:
ISR(TIMER2_OVF_vect){
 b6e:	1f 92       	push	r1
 b70:	0f 92       	push	r0
 b72:	0f b6       	in	r0, 0x3f	; 63
 b74:	0f 92       	push	r0
 b76:	11 24       	eor	r1, r1
 b78:	2f 93       	push	r18
 b7a:	8f 93       	push	r24
 b7c:	9f 93       	push	r25
 b7e:	af 93       	push	r26
 b80:	bf 93       	push	r27
	timer_counter++;
 b82:	80 91 a3 00 	lds	r24, 0x00A3	; 0x8000a3 <timer_counter>
 b86:	90 91 a4 00 	lds	r25, 0x00A4	; 0x8000a4 <timer_counter+0x1>
 b8a:	a0 91 a5 00 	lds	r26, 0x00A5	; 0x8000a5 <timer_counter+0x2>
 b8e:	b0 91 a6 00 	lds	r27, 0x00A6	; 0x8000a6 <timer_counter+0x3>
 b92:	01 96       	adiw	r24, 0x01	; 1
 b94:	a1 1d       	adc	r26, r1
 b96:	b1 1d       	adc	r27, r1
 b98:	80 93 a3 00 	sts	0x00A3, r24	; 0x8000a3 <timer_counter>
 b9c:	90 93 a4 00 	sts	0x00A4, r25	; 0x8000a4 <timer_counter+0x1>
 ba0:	a0 93 a5 00 	sts	0x00A5, r26	; 0x8000a5 <timer_counter+0x2>
 ba4:	b0 93 a6 00 	sts	0x00A6, r27	; 0x8000a6 <timer_counter+0x3>
	if(timer_counter >730){
 ba8:	8b 3d       	cpi	r24, 0xDB	; 219
 baa:	92 40       	sbci	r25, 0x02	; 2
 bac:	a1 05       	cpc	r26, r1
 bae:	b1 05       	cpc	r27, r1
 bb0:	68 f0       	brcs	.+26     	; 0xbcc <__vector_5+0x5e>
		TCNT2=0x00;
 bb2:	14 bc       	out	0x24, r1	; 36
		sensor_working=0;
 bb4:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <sensor_working>
		rising_edge=0;
 bb8:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <rising_edge>
		timer_counter=0;
 bbc:	10 92 a3 00 	sts	0x00A3, r1	; 0x8000a3 <timer_counter>
 bc0:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <timer_counter+0x1>
 bc4:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <timer_counter+0x2>
 bc8:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <timer_counter+0x3>
	}
 bcc:	bf 91       	pop	r27
 bce:	af 91       	pop	r26
 bd0:	9f 91       	pop	r25
 bd2:	8f 91       	pop	r24
 bd4:	2f 91       	pop	r18
 bd6:	0f 90       	pop	r0
 bd8:	0f be       	out	0x3f, r0	; 63
 bda:	0f 90       	pop	r0
 bdc:	1f 90       	pop	r1
 bde:	18 95       	reti

00000be0 <__divsf3>:
 be0:	0e 94 04 06 	call	0xc08	; 0xc08 <__divsf3x>
 be4:	0c 94 e5 06 	jmp	0xdca	; 0xdca <__fp_round>
 be8:	0e 94 de 06 	call	0xdbc	; 0xdbc <__fp_pscB>
 bec:	58 f0       	brcs	.+22     	; 0xc04 <__divsf3+0x24>
 bee:	0e 94 d7 06 	call	0xdae	; 0xdae <__fp_pscA>
 bf2:	40 f0       	brcs	.+16     	; 0xc04 <__divsf3+0x24>
 bf4:	29 f4       	brne	.+10     	; 0xc00 <__divsf3+0x20>
 bf6:	5f 3f       	cpi	r21, 0xFF	; 255
 bf8:	29 f0       	breq	.+10     	; 0xc04 <__divsf3+0x24>
 bfa:	0c 94 ce 06 	jmp	0xd9c	; 0xd9c <__fp_inf>
 bfe:	51 11       	cpse	r21, r1
 c00:	0c 94 19 07 	jmp	0xe32	; 0xe32 <__fp_szero>
 c04:	0c 94 d4 06 	jmp	0xda8	; 0xda8 <__fp_nan>

00000c08 <__divsf3x>:
 c08:	0e 94 f6 06 	call	0xdec	; 0xdec <__fp_split3>
 c0c:	68 f3       	brcs	.-38     	; 0xbe8 <__divsf3+0x8>

00000c0e <__divsf3_pse>:
 c0e:	99 23       	and	r25, r25
 c10:	b1 f3       	breq	.-20     	; 0xbfe <__divsf3+0x1e>
 c12:	55 23       	and	r21, r21
 c14:	91 f3       	breq	.-28     	; 0xbfa <__divsf3+0x1a>
 c16:	95 1b       	sub	r25, r21
 c18:	55 0b       	sbc	r21, r21
 c1a:	bb 27       	eor	r27, r27
 c1c:	aa 27       	eor	r26, r26
 c1e:	62 17       	cp	r22, r18
 c20:	73 07       	cpc	r23, r19
 c22:	84 07       	cpc	r24, r20
 c24:	38 f0       	brcs	.+14     	; 0xc34 <__divsf3_pse+0x26>
 c26:	9f 5f       	subi	r25, 0xFF	; 255
 c28:	5f 4f       	sbci	r21, 0xFF	; 255
 c2a:	22 0f       	add	r18, r18
 c2c:	33 1f       	adc	r19, r19
 c2e:	44 1f       	adc	r20, r20
 c30:	aa 1f       	adc	r26, r26
 c32:	a9 f3       	breq	.-22     	; 0xc1e <__divsf3_pse+0x10>
 c34:	35 d0       	rcall	.+106    	; 0xca0 <__divsf3_pse+0x92>
 c36:	0e 2e       	mov	r0, r30
 c38:	3a f0       	brmi	.+14     	; 0xc48 <__divsf3_pse+0x3a>
 c3a:	e0 e8       	ldi	r30, 0x80	; 128
 c3c:	32 d0       	rcall	.+100    	; 0xca2 <__divsf3_pse+0x94>
 c3e:	91 50       	subi	r25, 0x01	; 1
 c40:	50 40       	sbci	r21, 0x00	; 0
 c42:	e6 95       	lsr	r30
 c44:	00 1c       	adc	r0, r0
 c46:	ca f7       	brpl	.-14     	; 0xc3a <__divsf3_pse+0x2c>
 c48:	2b d0       	rcall	.+86     	; 0xca0 <__divsf3_pse+0x92>
 c4a:	fe 2f       	mov	r31, r30
 c4c:	29 d0       	rcall	.+82     	; 0xca0 <__divsf3_pse+0x92>
 c4e:	66 0f       	add	r22, r22
 c50:	77 1f       	adc	r23, r23
 c52:	88 1f       	adc	r24, r24
 c54:	bb 1f       	adc	r27, r27
 c56:	26 17       	cp	r18, r22
 c58:	37 07       	cpc	r19, r23
 c5a:	48 07       	cpc	r20, r24
 c5c:	ab 07       	cpc	r26, r27
 c5e:	b0 e8       	ldi	r27, 0x80	; 128
 c60:	09 f0       	breq	.+2      	; 0xc64 <__divsf3_pse+0x56>
 c62:	bb 0b       	sbc	r27, r27
 c64:	80 2d       	mov	r24, r0
 c66:	bf 01       	movw	r22, r30
 c68:	ff 27       	eor	r31, r31
 c6a:	93 58       	subi	r25, 0x83	; 131
 c6c:	5f 4f       	sbci	r21, 0xFF	; 255
 c6e:	3a f0       	brmi	.+14     	; 0xc7e <__divsf3_pse+0x70>
 c70:	9e 3f       	cpi	r25, 0xFE	; 254
 c72:	51 05       	cpc	r21, r1
 c74:	78 f0       	brcs	.+30     	; 0xc94 <__divsf3_pse+0x86>
 c76:	0c 94 ce 06 	jmp	0xd9c	; 0xd9c <__fp_inf>
 c7a:	0c 94 19 07 	jmp	0xe32	; 0xe32 <__fp_szero>
 c7e:	5f 3f       	cpi	r21, 0xFF	; 255
 c80:	e4 f3       	brlt	.-8      	; 0xc7a <__divsf3_pse+0x6c>
 c82:	98 3e       	cpi	r25, 0xE8	; 232
 c84:	d4 f3       	brlt	.-12     	; 0xc7a <__divsf3_pse+0x6c>
 c86:	86 95       	lsr	r24
 c88:	77 95       	ror	r23
 c8a:	67 95       	ror	r22
 c8c:	b7 95       	ror	r27
 c8e:	f7 95       	ror	r31
 c90:	9f 5f       	subi	r25, 0xFF	; 255
 c92:	c9 f7       	brne	.-14     	; 0xc86 <__divsf3_pse+0x78>
 c94:	88 0f       	add	r24, r24
 c96:	91 1d       	adc	r25, r1
 c98:	96 95       	lsr	r25
 c9a:	87 95       	ror	r24
 c9c:	97 f9       	bld	r25, 7
 c9e:	08 95       	ret
 ca0:	e1 e0       	ldi	r30, 0x01	; 1
 ca2:	66 0f       	add	r22, r22
 ca4:	77 1f       	adc	r23, r23
 ca6:	88 1f       	adc	r24, r24
 ca8:	bb 1f       	adc	r27, r27
 caa:	62 17       	cp	r22, r18
 cac:	73 07       	cpc	r23, r19
 cae:	84 07       	cpc	r24, r20
 cb0:	ba 07       	cpc	r27, r26
 cb2:	20 f0       	brcs	.+8      	; 0xcbc <__divsf3_pse+0xae>
 cb4:	62 1b       	sub	r22, r18
 cb6:	73 0b       	sbc	r23, r19
 cb8:	84 0b       	sbc	r24, r20
 cba:	ba 0b       	sbc	r27, r26
 cbc:	ee 1f       	adc	r30, r30
 cbe:	88 f7       	brcc	.-30     	; 0xca2 <__divsf3_pse+0x94>
 cc0:	e0 95       	com	r30
 cc2:	08 95       	ret

00000cc4 <__fixunssfsi>:
 cc4:	0e 94 fe 06 	call	0xdfc	; 0xdfc <__fp_splitA>
 cc8:	88 f0       	brcs	.+34     	; 0xcec <__fixunssfsi+0x28>
 cca:	9f 57       	subi	r25, 0x7F	; 127
 ccc:	98 f0       	brcs	.+38     	; 0xcf4 <__fixunssfsi+0x30>
 cce:	b9 2f       	mov	r27, r25
 cd0:	99 27       	eor	r25, r25
 cd2:	b7 51       	subi	r27, 0x17	; 23
 cd4:	b0 f0       	brcs	.+44     	; 0xd02 <__fixunssfsi+0x3e>
 cd6:	e1 f0       	breq	.+56     	; 0xd10 <__fixunssfsi+0x4c>
 cd8:	66 0f       	add	r22, r22
 cda:	77 1f       	adc	r23, r23
 cdc:	88 1f       	adc	r24, r24
 cde:	99 1f       	adc	r25, r25
 ce0:	1a f0       	brmi	.+6      	; 0xce8 <__fixunssfsi+0x24>
 ce2:	ba 95       	dec	r27
 ce4:	c9 f7       	brne	.-14     	; 0xcd8 <__fixunssfsi+0x14>
 ce6:	14 c0       	rjmp	.+40     	; 0xd10 <__fixunssfsi+0x4c>
 ce8:	b1 30       	cpi	r27, 0x01	; 1
 cea:	91 f0       	breq	.+36     	; 0xd10 <__fixunssfsi+0x4c>
 cec:	0e 94 18 07 	call	0xe30	; 0xe30 <__fp_zero>
 cf0:	b1 e0       	ldi	r27, 0x01	; 1
 cf2:	08 95       	ret
 cf4:	0c 94 18 07 	jmp	0xe30	; 0xe30 <__fp_zero>
 cf8:	67 2f       	mov	r22, r23
 cfa:	78 2f       	mov	r23, r24
 cfc:	88 27       	eor	r24, r24
 cfe:	b8 5f       	subi	r27, 0xF8	; 248
 d00:	39 f0       	breq	.+14     	; 0xd10 <__fixunssfsi+0x4c>
 d02:	b9 3f       	cpi	r27, 0xF9	; 249
 d04:	cc f3       	brlt	.-14     	; 0xcf8 <__fixunssfsi+0x34>
 d06:	86 95       	lsr	r24
 d08:	77 95       	ror	r23
 d0a:	67 95       	ror	r22
 d0c:	b3 95       	inc	r27
 d0e:	d9 f7       	brne	.-10     	; 0xd06 <__fixunssfsi+0x42>
 d10:	3e f4       	brtc	.+14     	; 0xd20 <__fixunssfsi+0x5c>
 d12:	90 95       	com	r25
 d14:	80 95       	com	r24
 d16:	70 95       	com	r23
 d18:	61 95       	neg	r22
 d1a:	7f 4f       	sbci	r23, 0xFF	; 255
 d1c:	8f 4f       	sbci	r24, 0xFF	; 255
 d1e:	9f 4f       	sbci	r25, 0xFF	; 255
 d20:	08 95       	ret

00000d22 <__floatunsisf>:
 d22:	e8 94       	clt
 d24:	09 c0       	rjmp	.+18     	; 0xd38 <__floatsisf+0x12>

00000d26 <__floatsisf>:
 d26:	97 fb       	bst	r25, 7
 d28:	3e f4       	brtc	.+14     	; 0xd38 <__floatsisf+0x12>
 d2a:	90 95       	com	r25
 d2c:	80 95       	com	r24
 d2e:	70 95       	com	r23
 d30:	61 95       	neg	r22
 d32:	7f 4f       	sbci	r23, 0xFF	; 255
 d34:	8f 4f       	sbci	r24, 0xFF	; 255
 d36:	9f 4f       	sbci	r25, 0xFF	; 255
 d38:	99 23       	and	r25, r25
 d3a:	a9 f0       	breq	.+42     	; 0xd66 <__floatsisf+0x40>
 d3c:	f9 2f       	mov	r31, r25
 d3e:	96 e9       	ldi	r25, 0x96	; 150
 d40:	bb 27       	eor	r27, r27
 d42:	93 95       	inc	r25
 d44:	f6 95       	lsr	r31
 d46:	87 95       	ror	r24
 d48:	77 95       	ror	r23
 d4a:	67 95       	ror	r22
 d4c:	b7 95       	ror	r27
 d4e:	f1 11       	cpse	r31, r1
 d50:	f8 cf       	rjmp	.-16     	; 0xd42 <__floatsisf+0x1c>
 d52:	fa f4       	brpl	.+62     	; 0xd92 <__floatsisf+0x6c>
 d54:	bb 0f       	add	r27, r27
 d56:	11 f4       	brne	.+4      	; 0xd5c <__floatsisf+0x36>
 d58:	60 ff       	sbrs	r22, 0
 d5a:	1b c0       	rjmp	.+54     	; 0xd92 <__floatsisf+0x6c>
 d5c:	6f 5f       	subi	r22, 0xFF	; 255
 d5e:	7f 4f       	sbci	r23, 0xFF	; 255
 d60:	8f 4f       	sbci	r24, 0xFF	; 255
 d62:	9f 4f       	sbci	r25, 0xFF	; 255
 d64:	16 c0       	rjmp	.+44     	; 0xd92 <__floatsisf+0x6c>
 d66:	88 23       	and	r24, r24
 d68:	11 f0       	breq	.+4      	; 0xd6e <__floatsisf+0x48>
 d6a:	96 e9       	ldi	r25, 0x96	; 150
 d6c:	11 c0       	rjmp	.+34     	; 0xd90 <__floatsisf+0x6a>
 d6e:	77 23       	and	r23, r23
 d70:	21 f0       	breq	.+8      	; 0xd7a <__floatsisf+0x54>
 d72:	9e e8       	ldi	r25, 0x8E	; 142
 d74:	87 2f       	mov	r24, r23
 d76:	76 2f       	mov	r23, r22
 d78:	05 c0       	rjmp	.+10     	; 0xd84 <__floatsisf+0x5e>
 d7a:	66 23       	and	r22, r22
 d7c:	71 f0       	breq	.+28     	; 0xd9a <__floatsisf+0x74>
 d7e:	96 e8       	ldi	r25, 0x86	; 134
 d80:	86 2f       	mov	r24, r22
 d82:	70 e0       	ldi	r23, 0x00	; 0
 d84:	60 e0       	ldi	r22, 0x00	; 0
 d86:	2a f0       	brmi	.+10     	; 0xd92 <__floatsisf+0x6c>
 d88:	9a 95       	dec	r25
 d8a:	66 0f       	add	r22, r22
 d8c:	77 1f       	adc	r23, r23
 d8e:	88 1f       	adc	r24, r24
 d90:	da f7       	brpl	.-10     	; 0xd88 <__floatsisf+0x62>
 d92:	88 0f       	add	r24, r24
 d94:	96 95       	lsr	r25
 d96:	87 95       	ror	r24
 d98:	97 f9       	bld	r25, 7
 d9a:	08 95       	ret

00000d9c <__fp_inf>:
 d9c:	97 f9       	bld	r25, 7
 d9e:	9f 67       	ori	r25, 0x7F	; 127
 da0:	80 e8       	ldi	r24, 0x80	; 128
 da2:	70 e0       	ldi	r23, 0x00	; 0
 da4:	60 e0       	ldi	r22, 0x00	; 0
 da6:	08 95       	ret

00000da8 <__fp_nan>:
 da8:	9f ef       	ldi	r25, 0xFF	; 255
 daa:	80 ec       	ldi	r24, 0xC0	; 192
 dac:	08 95       	ret

00000dae <__fp_pscA>:
 dae:	00 24       	eor	r0, r0
 db0:	0a 94       	dec	r0
 db2:	16 16       	cp	r1, r22
 db4:	17 06       	cpc	r1, r23
 db6:	18 06       	cpc	r1, r24
 db8:	09 06       	cpc	r0, r25
 dba:	08 95       	ret

00000dbc <__fp_pscB>:
 dbc:	00 24       	eor	r0, r0
 dbe:	0a 94       	dec	r0
 dc0:	12 16       	cp	r1, r18
 dc2:	13 06       	cpc	r1, r19
 dc4:	14 06       	cpc	r1, r20
 dc6:	05 06       	cpc	r0, r21
 dc8:	08 95       	ret

00000dca <__fp_round>:
 dca:	09 2e       	mov	r0, r25
 dcc:	03 94       	inc	r0
 dce:	00 0c       	add	r0, r0
 dd0:	11 f4       	brne	.+4      	; 0xdd6 <__fp_round+0xc>
 dd2:	88 23       	and	r24, r24
 dd4:	52 f0       	brmi	.+20     	; 0xdea <__fp_round+0x20>
 dd6:	bb 0f       	add	r27, r27
 dd8:	40 f4       	brcc	.+16     	; 0xdea <__fp_round+0x20>
 dda:	bf 2b       	or	r27, r31
 ddc:	11 f4       	brne	.+4      	; 0xde2 <__fp_round+0x18>
 dde:	60 ff       	sbrs	r22, 0
 de0:	04 c0       	rjmp	.+8      	; 0xdea <__fp_round+0x20>
 de2:	6f 5f       	subi	r22, 0xFF	; 255
 de4:	7f 4f       	sbci	r23, 0xFF	; 255
 de6:	8f 4f       	sbci	r24, 0xFF	; 255
 de8:	9f 4f       	sbci	r25, 0xFF	; 255
 dea:	08 95       	ret

00000dec <__fp_split3>:
 dec:	57 fd       	sbrc	r21, 7
 dee:	90 58       	subi	r25, 0x80	; 128
 df0:	44 0f       	add	r20, r20
 df2:	55 1f       	adc	r21, r21
 df4:	59 f0       	breq	.+22     	; 0xe0c <__fp_splitA+0x10>
 df6:	5f 3f       	cpi	r21, 0xFF	; 255
 df8:	71 f0       	breq	.+28     	; 0xe16 <__fp_splitA+0x1a>
 dfa:	47 95       	ror	r20

00000dfc <__fp_splitA>:
 dfc:	88 0f       	add	r24, r24
 dfe:	97 fb       	bst	r25, 7
 e00:	99 1f       	adc	r25, r25
 e02:	61 f0       	breq	.+24     	; 0xe1c <__fp_splitA+0x20>
 e04:	9f 3f       	cpi	r25, 0xFF	; 255
 e06:	79 f0       	breq	.+30     	; 0xe26 <__fp_splitA+0x2a>
 e08:	87 95       	ror	r24
 e0a:	08 95       	ret
 e0c:	12 16       	cp	r1, r18
 e0e:	13 06       	cpc	r1, r19
 e10:	14 06       	cpc	r1, r20
 e12:	55 1f       	adc	r21, r21
 e14:	f2 cf       	rjmp	.-28     	; 0xdfa <__fp_split3+0xe>
 e16:	46 95       	lsr	r20
 e18:	f1 df       	rcall	.-30     	; 0xdfc <__fp_splitA>
 e1a:	08 c0       	rjmp	.+16     	; 0xe2c <__fp_splitA+0x30>
 e1c:	16 16       	cp	r1, r22
 e1e:	17 06       	cpc	r1, r23
 e20:	18 06       	cpc	r1, r24
 e22:	99 1f       	adc	r25, r25
 e24:	f1 cf       	rjmp	.-30     	; 0xe08 <__fp_splitA+0xc>
 e26:	86 95       	lsr	r24
 e28:	71 05       	cpc	r23, r1
 e2a:	61 05       	cpc	r22, r1
 e2c:	08 94       	sec
 e2e:	08 95       	ret

00000e30 <__fp_zero>:
 e30:	e8 94       	clt

00000e32 <__fp_szero>:
 e32:	bb 27       	eor	r27, r27
 e34:	66 27       	eor	r22, r22
 e36:	77 27       	eor	r23, r23
 e38:	cb 01       	movw	r24, r22
 e3a:	97 f9       	bld	r25, 7
 e3c:	08 95       	ret

00000e3e <_exit>:
 e3e:	f8 94       	cli

00000e40 <__stop_program>:
 e40:	ff cf       	rjmp	.-2      	; 0xe40 <__stop_program>
